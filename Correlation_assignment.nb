(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    588485,      11894]
NotebookOptionsPosition[    573319,      11553]
NotebookOutlinePosition[    577277,      11647]
CellTagsIndexPosition[    577234,      11644]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Exploring Linear Correlation in Statistics", "Title",
 CellChangeTimes->{{3.700774153171832*^9, 3.700774159196458*^9}, {
  3.705104157104324*^9, 3.7051041574063416`*^9}, {3.70568519155404*^9, 
  3.705685209964157*^9}, {3.706997750774658*^9, 3.7069977608822584`*^9}, {
  3.707115629822*^9, 3.707115638238*^9}, {3.708200464665*^9, 
  3.708200465917*^9}},ExpressionUUID->"5c6730e6-6edc-4e66-bdb4-e722ac853286"],

Cell[TextData[StyleBox["Correlation is a measure of the strength of a linear \
relationship between two numerical variables. ", "Text"]], "Abstract",
 CellChangeTimes->{{3.700774172671139*^9, 3.700774220850109*^9}, {
   3.700778895632181*^9, 3.700778896308676*^9}, {3.7051041615775795`*^9, 
   3.705104170817108*^9}, {3.7069977668071585`*^9, 3.7069977847925587`*^9}, {
   3.7069978178561583`*^9, 3.706997853820958*^9}, {3.7070771738570004`*^9, 
   3.707077203504566*^9}, {3.7070819428*^9, 3.707081946566*^9}, {
   3.7071112088859997`*^9, 3.707111379741*^9}, 
   3.707116289517*^9},ExpressionUUID->"7f9ea7fc-f716-4c20-9916-041eb0044c8e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.707593224996806*^9, 3.7075932362560062`*^9}, 
   3.7075932769805064`*^9, {3.707593349838307*^9, 3.7075933884800067`*^9}, 
   3.7076838812012033`*^9, 3.707687232265012*^9, {3.708195989051*^9, 
   3.7081959908529997`*^9}},ExpressionUUID->"3da71b51-26b7-4498-95ee-\
bce05c506360"],

Cell["Why do we care about correlation?", "Section",
 CellChangeTimes->{{3.700774708350976*^9, 3.700774714085747*^9}, {
  3.7051042493566003`*^9, 3.7051042513157125`*^9}, {3.705686166481989*^9, 
  3.7056861672865133`*^9}, {3.706997874070258*^9, 3.7069979044209585`*^9}, {
  3.707081773913*^9, 3.707081781097*^9}, {3.707410179257829*^9, 
  3.7074101932351694`*^9}},ExpressionUUID->"cf1167b2-243f-407d-bf5d-\
74e1334e781c"],

Cell[TextData[{
 "Correlation is important in Statistics because it allows us to quantify the \
relationship between quantities. For example, you probably have wondered if \
there\[CloseCurlyQuote]s a relationship between things like the amount of \
calories you consume and your weight, number of fast-food restaurants in a \
neighborhood and obesity rates, income and mortality rates, etc. The strength \
of a linear relationship between quantities like these ones is measured using \
the linear correlation coefficient. When, we say two variables are \
correlated, we are saying that the variables seem to have a strong \
relationship between each other, but be careful, correlation does imply \
causation.  \n\n",
 StyleBox["The ",
  FontSlant->"Italic"],
 StyleBox["correlation coefficient \[ScriptR] ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " measures the strength of a linear relationship between two paired \
numerical variables, and it describes the direction (positive or negative) \
and strength of a relationship between two variables (how well data fit a \
straight-line patter). \n\nWith the help of the Wolfram language and data \
from the Wolfram repository, we will be able to do an overview of how to \
calculate and interpret the correlation coefficient .\n"
}], "Text",
 CellChangeTimes->{{3.700774312865305*^9, 3.700774350341485*^9}, {
   3.7051042689957237`*^9, 3.7051043842073135`*^9}, {3.705105072313671*^9, 
   3.705105092602831*^9}, {3.705683778330366*^9, 3.705683783009487*^9}, {
   3.7069979077899585`*^9, 3.706997957741658*^9}, {3.706998582707174*^9, 
   3.706998583079689*^9}, {3.707081865873*^9, 3.707081931992*^9}, {
   3.707082056909*^9, 3.707082152752*^9}, {3.707082299295*^9, 
   3.707082377231*^9}, {3.707082420314*^9, 3.707082613435*^9}, {
   3.707111407382*^9, 3.707111408492*^9}, {3.707111462783*^9, 
   3.707111606047*^9}, {3.7071118202939997`*^9, 3.707111905634*^9}, {
   3.7074101955908904`*^9, 3.707410237157606*^9}, {3.707410329165508*^9, 
   3.707410427249931*^9}, {3.707410468909383*^9, 3.7074106946907883`*^9}, {
   3.7074107788239975`*^9, 3.707410780997432*^9}, {3.707410834589721*^9, 
   3.7074108713154593`*^9}, {3.707410943599366*^9, 3.7074110502167826`*^9}, {
   3.707411155570083*^9, 3.7074111587420635`*^9}, {3.707411279582037*^9, 
   3.7074118512701716`*^9}, {3.707413767863758*^9, 3.7074138079837584`*^9}, {
   3.7074138524707584`*^9, 3.707414241445739*^9}, 3.7074145982811284`*^9, {
   3.7074153240825105`*^9, 3.707415340798241*^9}, {3.7074154122481575`*^9, 
   3.707415425060938*^9}, {3.7074155282602606`*^9, 3.7074155285112553`*^9}, {
   3.7075443119435*^9, 
   3.7075443906280003`*^9}},ExpressionUUID->"3a3cb3c8-c736-4327-9863-\
953d1b6ee113"],

Cell[TextData[{
 StyleBox["Correlation Coefficient Properties", "Subsection",
  FontSize->16,
  FontWeight->"Bold"],
 "\n",
 StyleBox["\[ScriptR] ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " only measures the strength of a linear relationship. There may be \
nonlinear relationships.\n",
 StyleBox["\[ScriptR] ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " is always between -1 and 1 inclusive. -1 means perfect negative linear \
correlation and +1 means perfect positive linear correlation\n",
 StyleBox["\[ScriptR] ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " has the same sign as the slope of the regression (best fit) line\n",
 StyleBox["\[ScriptR] ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " does not change if the independent (x) and dependent (y) variables are \
interchanged\n",
 StyleBox["\[ScriptR] ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " does not change if the scale on either variable is changed. You may \
multiply, divide, add, or subtract a value to/from all the x-values or \
y-values without changing the value of r.\n",
 StyleBox["\[ScriptR] ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " has a Student\[CloseCurlyQuote]s t distribution"
}], "Text",
 CellChangeTimes->{{3.707415634747721*^9, 
  3.707415726751598*^9}},ExpressionUUID->"80e95330-69e6-4966-a366-\
e7e80b5d35bb"],

Cell["Sample Correlation Coefficient Formula", "Subsubsection",
 CellChangeTimes->{
  3.708200565249*^9, {3.708200642575*^9, 
   3.708200688533*^9}},ExpressionUUID->"0575f350-3928-4e7b-be3e-f72e3a61ed19"],

Cell["\<\
We need to check our data pairs have a bivariate normal distribution\
\>", "Text",
 CellChangeTimes->{{3.708200704347*^9, 
  3.708200733742*^9}},ExpressionUUID->"d3ccfc18-0560-4e68-9930-10b24fed4a2a"],

Cell[BoxData[
 RowBox[{"\t\t\t\t\t\t\t\t\t", 
  RowBox[{"\[ScriptR]", "=", 
   FractionBox[
    RowBox[{
     RowBox[{"n", 
      RowBox[{"\[Sum]", "xy"}]}], "-", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"\[Sum]", "x"}], ")"}], 
      RowBox[{"(", 
       RowBox[{"\[Sum]", "y"}], ")"}]}]}], 
    RowBox[{
     SqrtBox[
      RowBox[{
       RowBox[{"n", 
        RowBox[{"\[Sum]", 
         SuperscriptBox["x", "2"]}]}], "-", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"\[Sum]", "x"}], ")"}], "2"]}]], 
     SqrtBox[
      RowBox[{
       RowBox[{"n", 
        RowBox[{"\[Sum]", 
         SuperscriptBox["y", "2"]}]}], "-", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"\[Sum]", "y"}], ")"}], "2"]}]]}]]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.708200822075*^9, 
  3.708201029524*^9}},ExpressionUUID->"2ada5ded-2929-41d7-9969-0270de392828"],

Cell["\<\
Comparing and interpreting linear strength relationships from scatter plots\
\>", "Subsection",
 CellChangeTimes->{
  3.707563758416546*^9},ExpressionUUID->"7335e475-c3ab-4afa-9e5c-\
e4f71168825d"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"BlockRandom", "[", 
      RowBox[{
       RowBox[{"SeedRandom", "[", "1", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"RandomVariate", "[", 
          RowBox[{
           RowBox[{"BinormalDistribution", "[", "i", "]"}], ",", "1000"}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", ".99"}], ",", 
             RowBox[{"-", ".75"}], ",", 
             RowBox[{"-", ".25"}], ",", 
             RowBox[{"-", ".5"}], ",", "0.", ",", ".25", ",", ".5", ",", 
             ".75", ",", ".99"}], "}"}]}], "}"}]}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.707415359661937*^9, 3.707415390807511*^9}, 
   3.707415816353839*^9, 3.707497854076146*^9, {3.7075446077504997`*^9, 
   3.7075446081485*^9}, 3.707729229731201*^9},
 CellLabel->
  "In[195]:=",ExpressionUUID->"918b87f5-c668-43c5-8b9e-9b707f6304c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{"i", ",", 
        RowBox[{"PlotStyle", "\[Rule]", 
         RowBox[{"Directive", "[", 
          RowBox[{"PointSize", "[", "Tiny", "]"}], "]"}]}], ",", 
        RowBox[{"FrameTicks", "\[Rule]", "None"}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"Axes", "\[Rule]", "None"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<\!\(\*
StyleBox[\"\[ScriptR]\",
FontWeight->\"Bold\",
FontSlant->\"Italic\"]\)\!\(\*
StyleBox[\(\*
StyleBox[\" \",
FontWeight->\"Bold\",
FontSlant->\"Italic\"]\\\ \)]\): \>\"", ",", 
            RowBox[{
             RowBox[{"Correlation", "[", "i", "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "}"}], "]"}]}]}], 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "data"}], "}"}]}], "]"}], ",", "3"}], "]"}], 
  "]"}]], "Input",
 CellLabel->
  "In[196]:=",ExpressionUUID->"51270cf2-3591-4bce-842e-dcd173a9d662"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Tiny], 
         AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVl3c8Ff4Xh22hgcqIlNXkq0EkdUQUQiGiVEYSJamMlFCIyk5oo4yUHVnn
WhnZe13rXlz7uvbF9fP76/Pv5/U657zfzyNuec/gJgsTExOFlYnp/y+1b17h
6vZe6Ew83bx/WxdiroJTUnE9PLygd14uqwztbXP0nbIWQTnn7LHdU/PoVDV/
tyyXALsff3yZczQaXJ7Ujwond2Jhk4g0j10NXNz5J5v7QSDeu7/p85WJGuRx
p+0plH4L7crcNBX+MtjdPnpgjuMPpKYpWp1MRXRU3e/Jp9qKV3TeiG8xa4YN
5g5P34l3wkny1hta9hXYk7XyuINjGB6qn8u+bUVCvpmLYdkabdh7dMr8nFAJ
UD3C/FKTB+CCAf9CgwAFJbwV5SToM/jlhD1RmjINLhnCfFe6++FcZkxFnVEn
5vT9ow0HdEHC8dFYYu0APlWT7zO+P4NG1fNNnFZLoCIfqlU7NghSmy8vMFwG
UWx3uMHew3PomGOYwVU2B905GV0DHn+RyaCL0W12DBs7ez1ETvxE/7AfMbtC
S0Ai0PtClMUC7lAyz7hzdRE6Pvyl1IixEqwbeGQOnmJVjZYs/yDDWgMSwlyz
v/wK8X5rRJ2oFhWHza4eBeNJIBStUdSmh+AEJ3fqd7VhlPsjsiqmsooq1nwv
7oeuwFknEZWRLiLs7WebVs6tR7sXOsavz09jg3MQaqVMg9u71qpH9osYWsEX
vl9oAXb+nQ+9bUVFsYRXbj1HpmCi62FUpHkDDlgoPf5DqoQh0/l8Jw0qyk0x
vtLDR2GI/p/eCZNOTHrt1xhj3gchzIM7gwSZVTeubFfJSGbgih+TfoAfBW8d
YfZ8fHYUHOKPUE64fsGX7h0SNaP3Ucjl9sNT6cPweEJqWgwm8D1n0sroWjGy
RSXt8a/5DRJ3Wb6cXqHCZtudVgF8s+h6yOGoOnsZjJcK97YVxWLbjevRzGP1
0E7w1D7/JRtv5jy8st1zErmr5RcrNMbB7NSGc4rn2VWZN3OwvzzMQdAsPSfw
Jn4Mrk1+VTk2RsE4dm8037yE/P+O0FkN5+G2S7uHQcQKKjx/stqWvww8Iiom
pcNUaN+zIfqf9AR6/HlJHIuuhMWoDeLE15mw6+YfcsaJCdAfS5drnh/Dqg0Z
tXqrZBA7KMHrXNeHNurfTO85jMG9nZaHR24P412diNfVzGTUs8reG3eEBHrc
tibhzAtIu26+WyplDu4Yt711et+BYU9GpG6ebgez1hvGSn6DEOlFp0iZDWKJ
2FTmjGo7fnjNLJhJHQIWjh+0KZ5WPKvrQPVMJULVtFqne+cs3A7PK9+8h4YN
iXNDQ1ELoF3M3C2vsohFeV5+0xI9cOwxF1fBg0HksblmrrGlH0MnuKiXr/ZB
zxbDWrumIYiNGmrNHxzGKPrzy4qHZvF5cPoHs+IF0Hjlkefr0wrVJmwTIe5d
6BDG7qp7n4hpbHNSZ/NIcJ+hHOrFnQ/08V0eb0LL8OKH8v8S439DArt7yXxC
FVzPfB5+PH4A3tcTtNlGBlH/45fkAxWd8OveXHTj80ZkOSakPJlNg/RRl/mw
P1S0lQ04lvS7AO8a5z7LuZsJxxMkmhMMydiom+JQ3UiB9G5KiXlaP3gd3Smm
M9qKNsoHq1bKSXjId1eIvcQAPAoMEJUymMWlEFWr/+zm4KJ4PdG7dRnYtL4c
oN+nI8+QQ1prax9GfNTNZzXohxz6332pCjN4UNY9vMtrDMS/6YjnJZDx3T2C
xd5dJKi9b3N8YXEal3wmLIYaqLCnffHuJaN8AEMP6zvJZdi1x8Hkg/0g+o6f
2sO42w96VjaXx3nYVG9w5S0P8rEShuZvmvxbHUDHAaPv966SYfvjWWLo4gwY
jalWWG6fwWjZNi/Ks1fImR+ypi2DcDw343RJdiw0bvjvtaFGLFp6pDuz76VA
fcXQwVvjQ3hzMT3aXH8Qbk+U5C30DWFt9iviCr0CwipJ0048FWh4jB/aMun4
2+jLD66UJShIY+Jaez0AFfLqikK7O/BsTgbX2RwaJLySMPSZoiLRC+9EncvE
NCXOzsHJPCx/ENyio8oAPeaQnsluOoopp/mXCYwB/3GrzCgfMt61XnprN0vE
wcS6B+dn+4GXzLuVb3AFZsjFlUY/lzFWzyq62mccOtjtnx8/Mo0U4b17gi/k
wqbKJqqAVQ5uptpnplxqA96y0LmpXUTUlkt9O6IygaaXJE/ccZsE93evicwW
c6D0zE52f+MsCvLE99FKp+HrPTNH9yAaHr/XG5Cxj4ytI0TrMIVRYHJ111fj
YCLML0aLlQWtwNzVn+mD6eMgsnTeJ9RoEC/7F9wSSlvG3Tv33tpHWoE7rftP
lm6qQOvv+Q1ftv8Ewq6rjDD3NAg3TqCE25VgSgMHw+18ESzeY9ZztKvAnfME
9bePc0CTjSKmsq8IeEKjbzAzZnCDsP4O4ZBZYP7z89X3YQKoJR5TFcxtRPfd
8WaddwrwvAfDlysmG0odL9fuFiMj3w3t65s2t8FPH1mpWv8PSEhL7z+84QvW
RO9eMdEcwd12/2UTnMfgYS13gsNrEm66mSW/u2gY3h8W8ervZCPEsN2NufmI
Q3XfrfHox+8WwGbeDDieLKHI0V7B7BMDaNYsxHPdux+GW4Xuv1JcgNHMDaHc
h2fQ9+bWasmvg2jTuZGDvkyGLneefak1JZDX33BgF99vfCwtOFSaTcKtBN/7
6h2DIMws8hPXe2XX4fOemVpkOGH0eovBVQaYHlMSeWbEwGuxifTe2mnIKLHN
YTkwgQP9RbvKrtVDwqdqi9KGMox2rqbpvWhFpkd2atR34XAyq4EQa1aLBKuz
SVUXiOB2Y+ldXzsR0mYE7PBkB6YbXDip+HEANTllamIHeyErZGiHzyYmwtbT
j/PbXdZg52rXjOrZMSDdOfPYN2gU945ltTHxLaK7rLcIv8wsOIZIO+9xaoae
j0kLp0424NmfI2C4MgmhDzWOpV2noeZ0w0pCAR0yQ2jU0mQ6Pt1TMs48PYIs
v+mLv+VH4PrrQqWUlHo4K+yvJmPVgW31kUnyN4sgvjhVbhibMXSjtcbO2CH0
22N/yLSQArYvagWGPQgg/qmVNTMwAwcKKIfDcnOhtlX9zfasOtwQxNTE040Y
t/PNjlqtX7BJ5cYRmuAYhJNU5M4YTOLW3Rw/P8ZSwdBzaLZOfhzPVyZd47Xt
wt8zg1kuUtWQXRrTEiY5jVNL0SqXEsaBR9foKKfdR5Sf8CwPciNgSVGHw6X9
G1R1ePdGBZ3gItidvp52+NQ8dO6tzmneOo9TJmn5nq9aobPqvez+rHa84Rcy
Yin5G5X9gwYn6UXQuvG6X3NzBmzVvWpn+rQRyWtvlv/9a4NNYr5B2SWt+Mhf
zrY2ggrVthK4ODiJkx+U60KysuHxirvs3Uuf8cZO35dHtWrQjjPVzLER4QVr
+ph35RzS3lpKD2xZhO9Ui1z+9Tx9NuN1pEWBBk9/ZEbbm47AbuNoV2rGMHrH
5/Bf52/C8EmbMO7XedAsMseX2DUOAoTD4+rOY7hhbfbETv8u+PbSPODmeBsa
BKkf7ThHBfqJco6mfdOYF/98kvxpFmpPtgcg5xyKHXr15PtdCmouZJ78IDwE
m7iFOFi+MhN2piY0XgpeA7ZQjXcftrMRtic18zm9YVYdLNuWonFnnXd+PFJz
+0CF2C+fnT8dIuETBuwf5u2HndeU2D4akrA7qOR7JdMIFG4vrDuz2IOLp6V8
zur1w6v2i85yWl9AZu3GIyG/DBw+/uLZQDkFjAn71DRkh/G0rff3xfZxzFCN
PyfSOA7aw8y+1YR+THnrnJzeQQZdxf6dbwOZVc1e7J89xc9AoZTfliYzuVAp
H/7I/kAR9tSuPZ0+E42BBx4meT0g4KxIQJnmuypgC4rVyLxTg7ZhyZwZ72cg
Y2u3qI3l+p7cKyom5ZLA8KTF56daJBT7z7BCyD0Ok9oDEna9L0b4cbxalKsJ
8p9zy5UWduAsoazI6Xo2OgpUm9uLuMH14qKq9HUO1jvXailYR8Uj9HNejerD
4HU6aO0Q/zq3FN3oPb6RjPkhZNc7p9rh46VTn5jk26DmnFeEtlAVHvd6GvPE
sg3nVKkvP1IG4OufjSmvr16CQ8ZuYao7c8DkkKdg/ZdusPWxOHTbowdTxv9d
2B7/F4Hv7pTp3ywItGHk7jcgAcspGdh1axAzeb83nf2ZAvV2Y9/iNtXjpQN0
DrPKC9jEKsglz9IAfH42x41SKsDx1GvW6yKNmH2JNWGmqR4dvcTEc8d+oPDb
lTCDU534Pcgi7OizJjC1HAhs98jHK/tPC4xXloDPkS2D8xfmsL0o7vFo2ywI
z8hET2E9zHUpL9bd7UaRbw9ehEoPwYXW5jJKah9m+buMe6uMo+CizV9Z5Sko
3X3B5kkNDVfM5f7E0ydhMlnkh5ROM/i7EXNCEutxILbj3arGHKi19re66dLw
tsrPpYvORfB7gv9tCWcVxnGcnN1ycAxOpX72OVpDQpGVO/917ZgD6t53XLbi
C0iwD2R8aWNAnl5RsdxLBk41SZBkmctR6PwXjuuXkuEOBTwkDiZjN3++yH7/
JOD/lWc2SCJDwL0LAZSuMXQw7/Rr3rkGgayxO0uOrWCl3pk779X6MFrQXcbt
yAjIsZ9+95M2CfE6snv6lyZRU9/gsT/vEIjyO3Lq4CBKqhQVyDzKxINnpJT2
AQHq3jY+XqiYAf4HT9/Wqkyj5NY1BunWHByxrtZ53DeLy/bw3y7xYczLbFOx
JXQDytxqNTxYgUnsz0MeQCtwGpqTPLPbQeTBjY4FsU5McYjyzxino3eKyOLX
TUsQf1a2eod7PYrpY+X03RYI7btUN8xKRDUZJaGO8A6oO9WSKKDUjBs21e1l
/5sI/fUaRGb3QQx1XNkp6jMEL446LuvmTEHDtv+4vPJHMKyYyr5/7yyQJANl
TNbnZLzTN8BpZBacDc9M6RZS8QozQbXowAqcem/dO3mKgQ/Pf/FVnFjEH6qH
tZgE5kE01am+5tb6fR19QonaPYvCD/a5sPxkIsy5nOqmu63BF+KiyIdcGhQ+
XMic8JxH/9FUjYIXlchEk5Z49CERVLwuV3y9R8LQ+NicrXKDUPU00X1b4iwI
FamfOS49g4GRKeSHTWRMKA4u52ogQ3NcjoO29l+Y6mX5xDpSjeyuh05JGddC
63Ro1SipEqVrOqJ5uOagVszzhscUDXlnLW68OziH79/UJhG85iFakW7tzTeK
HMZLD3as322l1E+urZeYCKpKeay50syqOjbe2X9npsCALnGt1Hga2+SZrORd
J8DnwpYb8bepGHjtwuQ5ehPqjcwffs6RA7b0e3Ef2prhG8dLiXtvCah/o8Va
G6cws0DKw417Bngu57y9+osKm+ytDP/20nBtNGtxZZ1Pw08Me290ouC8pZ7r
+NgMiO8SNrg+P4OpUgFBv5QXcFUp+FDxm0X49fWQs9OnIVzK3XJo/wcSHAtm
XfKsGENWtyuFCZfGwKtdPaA7pRV5d80X0hlhaEFUOpCSvIjC81HsBUxLEKGa
LjlPp+LJmR+NGYwpuN1VHX3+TD+qFfxkZzvRC5V6x/e5VC/jw1k5hpjgMsxU
Sz0ltDdhwusEx07tr/jy0xFN7TE6llS9KCteXAbSt2hWrQMxUMXZfiyCpRwV
2KaDFEtGwF/Sl1sigow1zUXagz19sPVEj+9dyX706jzM0NHvBccKjvudH0io
flaS2yJwnVtIUhxSE0Scexc9s+/mDLYl9j+t4JmF+UPZL0Knl4D72x9lYY0l
tCE+anrTuAS3Q/dfmRmi4zblbp/vH/5iyM7UuR8iWZC0eVni7cZhnB48G1Dk
SoZjvRQDUtMI7tleYvGFMQTKn07tJorOYM61smb7VRpEASe9d5IGdxWjHNcR
B9W0bkl8/lWOjon/9JxFA/EHbTX9yqkupB/bEpi4pwlEH57OVbQthctJ216u
UZvR0fSllZbhCGzkst37a514YrTHjJNER7HZnjIsbTsCof6zE7xLzfiStlvw
11InqC+efGluQ4PpMcWN0vE0HFFq2xnxiJVw1EFP+2I7s2pOeoJcWnonbhbu
zFfpqYckr3AW+ZdTKFzhs7l/eBqi5/fyqXLOoJDkFu1d/qMQ8YhfRPdLFzjp
kL6a7iThbxo4ByvR4LDH+N2V5vV9fekmoJA7jiZ+e8Qvuk+CWlSJhdPvafAt
8Hu6Y3USGXOX9jKtc6B+1tkcffkZDKkWS3N/u4ynv3TEnFVchov19y8RrhHh
jOYtylaXdhQX9hdTjJ1Zz/+0/KVwGuSELHy54LMA1CIr6s2JeVRSuevf0dCK
y5t46y1PtAN9wvaNT8QoyjrEhJ24NwUDhwuw8EALwElxll/jFfh97+PzTC+p
aPVN0t7k4zRYh16/qldZgPm7pD6YjhViTVKE9ZolAz/NqXZpeq6CBuW3VvaR
PFg8NU7J3eCNm0dKyD7nRlDXKLo2tHoSaFtttU89WIMzZ3uc9EyZCRP5EnPK
ebWQ2F0qFEStw8HNtIjxdW78+cKr9k/jMHzXeNpYkl2HhNRVf9fQFNDS3Lf3
e285+F6SdpsuIeB+WdmwP29n0boCrBbuzkEAH0Vqd848+IkuTaoGz2G4qklN
7sA8cqfa6/6VmAft5pHztfWV6Pmr2Lh+vB5kt2w2zzTvxx0h/+0y5O0G1lha
l2sWHVj42V5vlFnBX8fuPFAU7cSxmVdeKobNUP1xj2I01zR87u8NylulYea2
nMNKmX+BU8dKQHWtHJeuv72jMfETD1Rdqfgt/xfi2Vr1Pu4YwHIh/mvpmQPw
crJW6Z0MCd3xesAD/0G428YyprCtHzWvL5Dokq3wbonyvK1vAdp3PtGdXpxH
lY7HrtscaCB2hcgfpz2N21QNOcQq0kDP8hFl+9e3KBcYlBLYNI3xTksdZ7Kp
UBMnrtD1bQwI27le75Ebwjb1pH1ssotAuZj2qTx1Hh0rfAqCpXrB+6eQyIsY
EjbrdWuyPKViWOxp5TfhU2CxupP6NWoZvOlmMTGkJaRn9i6qVs8DG8u7T76r
s8hqJbiZL3IA9ty6XPCpm4TaU2Q5Gt80Lq0K2QfrjkLSQ01aqeYQbolYFNj7
dhiiP8xsNVJZ98nW/f7+yrOg7K8RE8LHRhDf6fnG+wCLquL5YELbz3kgzQmb
GDDNo1/dXvEJfzJyLKpcMsofAXc1T67XkVXo4vtEm3mwHlKsD27yLs1HM/kO
j566arjOk3u2aSQWK0w6s/YZ/cL3CuqD9jKTWBWTOhYgPgmmNz+usXC2ocDv
u8HJEk0Qv/zP7sfsInhbsYyra9ExaePmzObvw8j82eBalR8FXA5GnaXNIVbX
cnWOZ73DEmO/VyVS677xxECqsrwTjb+8FeDIWkIH1rB9IhFLoGaeG+peMgTH
x5Nkrf8MosPk0GHb6QmsO3Jmkvv7OEyaaLqVjA+DAJfhvgXvQfwvvfhViiaL
6iz7ZhOvKWZC8H99G6pkFlDAy2HL4YfzkEh6Eu9a2IknP6i0aSS3g/73f/4P
8max5xExyE2GBun3Dyr1ZTIT9N7ROgmnWFQ3npEx/KfSjxCuNGbzuxcaGH0/
nh4cgL/E8mt6zU3YaVr/qdpgCAV2ljx2lOsD2dXJB+das4GXnnNb/EYBloap
mHlUVYOekGwUe2QbHjkcGXm3eQY5SmPr9rfNQfTHvLFtkYswc76si0xdxNnr
Mhyv4rrxoee//27bdYLdsX6pHGkqXkgsc+domoR3Yew26p+J6GytQo/c0gl7
uUmPE/bmQfrcl509rrnwWDiETf7qej89KRl08p8H2aFZ+yRiM+KIRaRTcSMM
2R3TkTn1Dxet7jzX84wD6WfWnpm6i3hwgU0mJG4RIvjtuKhzw3iX3hzIcnUQ
4n826v8nTYW++latWhMqckby3j3bVwG/swQCvlJLsNx4hY+6MIH6ss2Lj9f7
5doui8YttRPAkkI68dCChkfYe9rKOPrwsGqVXOh/PbDWNvGpJJBFVcx9UXE8
lIXwKNNwrM53AjlL9N2YeKhQvyvyuoZUFz5kY3z4l9cHRRTHy5v+UpCxMrR6
6PsIFLzMD3pg3ondyb3Ou8itkPR+dpvSpX/Y6fz0lTyxD3YzEfdbZtXjWmG7
bgo/EZz2n1o7emAVt7Bvmiv6sAgMjw7WzMRYYHCopmWs5552w98dS0/nsUFh
gRi4PAf/SPe0+kRpqCr9GvlLabCoFnNeQLcGfQ2E1P+IFwIrxUaIbkqETTLv
L+761YHPJi6+utFOQhq5Z+zY9lG4kBIt9ud9JQY4rURmsCE4+2vtS58aAlvQ
oAu5TaFI5ud7XQdmkM/SJrNamAZUcX+jq/k0rBXRuh/jQoW4DUphkqtj4D2h
2Za7YQx97LRXPz9bl0trtrjd4kyEP9kWatvbGtDna3ynqGAX7Ah7LWQq+gP/
fdsx+0n4F+bQmETlZYch9WS0uPHwMEo7Vz0+LfMXuccd+piE6oGPwzC9m6sf
5yMSmbWHiuCm8a8fF6+wEc6GR3gcq2RTzb8erz9zewZeSOTZxx6n4tsZ1Uca
CWScF1WSlVqirHM45/VjDQug9OHMD6HrSzh+2yRGpGqDqt+huEg2E06CGP/M
nyc5s3DupIr+FZsFvJLw0EJskYJmRwoVP82MQ3yTrNo7iX6Q/USJYBHsQ86f
gTW/ZUexwUjizHLpMERYG7hZsvTDm0u1ctcWetHZaZsVJboNbr76unHPShO+
YlbwTqymYofhytdtrBPwozDmh8itFtzkE2UfrdIEp12CM7Lu9OOR432VHeQe
iKrwOKhK70FTwfZGYOsDAU2/zGrxUow5UGQbKkSA3fYmVLObg3AgcXbwbfUw
rsr7B89iKw6eaKqo/q8NPl7/VKV/ngAhzMF3djwmIKVPUbYgmQyGgWGfY7dQ
sFrp/paLPTSIkeQVvv2XhmN2CSrSuxfh2o9725NDFrBHxYiRPNaGmlSediOZ
fqjM0ghW+LgCJQfzODxPr+JXu42Pk0z6MM1vWuC9Sz+oi1zwPOJOw0+35BPt
jCZBOPp95lelETimq/u5PHMcDy/HkFINq3DbZ5M6vlN/oYZ45Yuc9CI8LD2r
u6ZKx2lBusrhmj68tPWar2cLGfJy5ts3bGiDqleJBuwsZGRmLk9q3zqPYl80
GqeYaVAfMvcfPmQl+D+quepLYFHt2nX68zR7Pez9kvggPLIG/6odE8/aQoV5
Usb7osoxlB+2NNjxdAC3+cv4/JntgumY592PZhlQu4v1IEOOgd5t8r6am3Lg
qdV4iOn7Fiy6/PT4q+3jWNrkeO2N7jj8LAk1uC3Lotp5UF1wKJGZoKJ+Zv9K
ehvIBY+bvnb+i8czWL2Sdg+htvPiqNwTCuh6bOAcZZ7ESVcLKa2YKXBjcL8S
EyahY0SJydHsUfjeXxNVlkoF7+yMhMsm0yjEXqO240EdPIxlqhmtrce5KEG7
s+5zyBHq77t1fA44xk/YmL6chjBJ6+StkTNonDUynBBGg+QnlWufb83hmbTr
hXmrVRhqVWORqtYA1mbum8yXe2He1+m+TFgLZtJZLKevNaKt9P6zYnJVEPNI
XoyHTkah+APb7hf2Q2lSo0vJHXu0zoFOLbHfKDfikrA7ZAT1uBxfsFn2weQH
uR3y5RQMnqqfTz0/Aj/prI+TMvqBMNI6yZtGwtdcX+zIzgl41aTd9G7UcySK
GPl8u06FpOkR5vNTU5jYK3NIbCsRqo2aJCGMjLp5GRya77thWPCJtajTIAYX
SPWNlzaDi74+kRjUjBJXXQgSvLNwu5Z25XfNNJ55VKvkwzWA7rqUrk0TZBh4
4wwK6/kbfmTu8fQ6H4eMXXM3OxMD7Xuzxe2et6Oxy9U9IpnL2MJwY3pwkAFm
76rJUUJxaHCg8p3l0Lrn18tKm73uwlvP72YJhLRDpKXEH6L8BD5WoAfyNIyA
plu15YL1LAhwn1Pl3kFFsSO5thvWPfZf8bMNEzaTEMhpgKeCSuDL5MHzTsKJ
6P/gJrmYPojcxw2/T6gPgLdDi/oepQnISemQILuP46OJHq3DDBoebM+MfX5+
Bsz6DDVERCbhmWSVq+C/CWxYoB370dAAxQqXGZNKDXgmUczMu3wUL3t4Qv+h
IVg5F2liZdUFZMPQbbSyelzySxNbTmAiiL9OU3n+kUV1SpfP/IV8L4S0dBd/
sxxG/tEZj407JzFBOjFV4uAI3Lf6e2ROOg/Op4T0uIaV4Efrvy6HiO/xPt0h
sdcjA60m2P5dFiiF5b5JZqOwctTiaG+XUm1HBfP6vs8fO+GuQuSj64oxYPfM
+7+nLR9BmtFhL/QuFialgq/E3f4NEvNrjvzCRRAZLLGj80osVE8rPpaV6cZc
yvMi1c0dMM98WjKvMhzfeUdvVxqph2KLLSLK24eBP032yuabw3iSLzJi7fQg
/Oc6QlHtHMaKAvZz5PXeptQyNm0+MQfmF1215MPzoZT7176bD/Mx/cWTbu+z
VPh7jeHZeomG2Vfs3Lq5q8Bv03y9R2UxrkYfKk8/MI+FajqNmlcW4ErjZ/bV
6G6sbN63KcykC47X+a5ulZnHK5kPXvKs8wb7ZBvL0Qv9QCS37W237UfOG05b
Hr1qwsCDwby/91TATZpkeaUlDXbrtB7yZJtBuefXCIE6JEzapPq03GcC7nbX
b9+uVw7dRzSbzdRbcN9tGoHFiwQ8jAc7znhScNPzUvPmMhYCr0jg1wU2NtU4
noTCZkEy0jcyyzGxdkNWhNkPulsnPhEUOCZ8uA1UJgbSFMrJWJWjqSRfTgTr
NzLMapNklGXxkhzeMQJnDvhnpJgtg0voye+vE5ZRv/Jm1b2d7YBV9AXN3kb0
zEvOb2Ba97bIyeea/0bwnq9L0ha/UZz7fWSzgP44lMoz7Be7prGPi28xaL2/
VepuF3zs30RgEItaJAo2qTa42B38kkfEHBEimzA/CfqqKg84qNPwdHXJB60z
M6Ds8LkjXrQItUy9i+N/VYBUs/2hZqUObOEz/soW0ge+keVHTS1zwK6uZnPm
5QbsvtNvrDCzhPnfHTVsCHPwX1UZPUehD3frManVVgxAiqPoaEdYJx7eMKm9
cZAEoivb5m6EUrEtzqd+KJkGtblfI0f2TmLnWmnWmvMYWF1U9vlmMIgqoudX
iCoUSMzKGWh6VQr1tpI347bUYeLPC0ocfg24LzTuz1fjvzBRN+55+QMJN510
FT65awLIzlHMntYTKCUs5FZxaxj+frhwTrqwCXR8XAuey1Vij+/U6WP2I5i4
/PXgr5OjkKdla5a81oeuGvuIZ2G9n/jZvWvKhpCpzsFR++4k3HvxvjiGuxra
F2Oib95tRtK/DyGtY/O4q3W7Hf/WBXjR+fl3btIMOBM/Sl7bNo+7dx0yePWI
Dle0su0n5eh4xdX+4bLRAMqZf9tT0joEnw/7zL17GgdDQw1iMasN4BRX1qC2
IRWl3MReXTifB/tkJ1OH9VhVI3gSL0zfZiEoSdFcPuSTYMWImSxe1Y9hJxN/
W11px95ZMT7TQ52waf9BdrHuVpx8sv07tawd9l5j5bWKLcJOBdec65EVMLTq
vkNpYgFcvYlCn7YtoDyfwMnbxCY0c3yk/bKrFpyep1/+yTMBxGdC4l27prGQ
Vss6F0QBvbh29RnvKQwyTx5OBAbGioy357xmADH78umyhTlg6k/STJSdx7lo
R2t3Rhtkh0WHpgq24aBdi4+I4TJqXrrHxk5dBb6UOPmgyUG4EJN2q+/oIC7e
DTJ3qe7H5BDWzWPznaBTKi/YyzQLSmpfS/fYUpHna9ba4d+/oSMiqHwmthbb
7v/YzjU8iInavrEnTCjAhAWHD+d344HuxgtRAj2gXu//5A87CZYHE9fc/Pqw
uzM+S9NkDJ0+emSYZo6Ci1Eaz0YCGYfeiu1W9xsFO4f7n9vruQnKDaPDPtt5
VFmWr1tlBExBW5iXqillneNWMx4mXfwLmqcFNzY9LENLbmuZmXkqRFHcRN9s
ncbnD51nkW0JTEhNJguuc1hjmPeEINWI0z8/hjd/7YBtKt//sj6cxi1kRuVf
VirYXHOXO/3iBSYUFM9SrVPgVkhtKQ/TCoyq3MvlVGIiWDb83Ht1rBLEOKZV
LHS6Mes18beX0xDObmwI/b3ex2m9Zhtpb2NQoHyv+j9qI9z428UZvLkOOBLu
iydItOGraXU9Fa0xGLrkwea6MoXWH/cJRgc24J75m3XtxpVw3SRH6qLgAhqf
MHVdy58D5wBVNu32QZBm65681TSOko7fTlSoL2A9OSlm4sQCvPIYmGT1WkSf
7p8dB9Tn4Llhh6Juax9sLVt4Q9xLxi1+bCtG63k1+3yDlIpQP7y8fejhuRuN
YO0hK3jkwj+8pVbD4zVSCTc8bpdTpL+gAtuZYgOuNGRK+Lvm3s0OR0d4wwP1
uzDooGAEa34HcDyK0WlZyMCJE3fizh2oBV5B8UrZHUX4/Y/qBqmibpD1PifY
GDyIrRpPZb5UjAHDNbHHNnAMvdt1tntsmYRpzU9iXYVtuDASIO/Y2gnDqCFf
4J2PEd90nzRHdMPqEdUdIpFkFC30LjxnNQzPePNmrvVQkWrrHmVOmoGRmi1f
rjososcNDurrkCXwGZ0JHVNtxj2nia2Fef3A+p+aCvlbB8Y9j+qIM2gES9po
nYrWCs7tmv9kKrUC+lLq2iqOfXitMMk//tMQiFZzk/S/saia1yhl++xnJ0T3
WQ0vfy6FpiP/7a6+Worh3NMzj842oHKNRM0z7TxgOuPCKktrBtMQg0Gr9434
ynFs1G24BbawrCwk1pVgA0FH5nVFITwoPvuKrNGCIk5TzRG7wjGz/niH8adE
EMm79jG+egwGHos8kDElY8CkSrPZhyJ8xPfm4P7jefDkleJ4/3IPPvjrw2Cf
6IfYg1ZygQvzEF3HSNsjsYQ545fb1srZVAN4z79NpLMRfsJAzJIwi+o1h7X+
z0wsBN04F8XA6+2YFfNBy3fzAPgxLe6ZWPf+qj+nihLW+cZ13EaqxPcvfu7Y
fvxGWjvYSW60Urw0C79CTMJlz8+jmljf5pbVQlRJ7j0edT8TwuWCg62sO9Fh
v5rp+7w6+Cc//ImoOgM9tWu8TOse6rldTuN+4CLodt86t+/TLMbfzUlcW22F
Y7cuiLMw92AyaucGmbCo9iUH8hu2MxGINidY4+bX+d1Tp3LzMAtB7fwj0Fe5
j1bBSz8ujJZBOt1r4G94F4o+fPLueNQwZJ8P9lt59QruX8lpjv1cDJzJZjpl
S/3Ip7Txhi+VBCly9it/UnvRp1hzr+rWNmAwvCXLv+WjVzxlzEWkCjcdPaK7
9+EVHA6F0MjxDFQ055ISz6RgFBeMxDwdAUmJHYHqrZ/AxU9EsH5PJe5v6VZf
qiOB/LkurZ9cvTjHiN+zrz0PgiNv0aXUU/G0fGeb8PVhHB2MdQ4NHoLhysg6
9/IGyGEnjDzjbsWHFdr2opE0OHhJxPD6HRqenN9StuksG6G3MURevZRV1YdL
VFZ49xzePMQoLoubgU1qdbud7xZjdfkhPS7vf5Bwbm480rwPmNoT6iULSdgl
G3n9zy0a7p+RW8AgKiTXVTsqLYzgAfond1LvAPD8PivezfoXon/UJRX7/MMA
GyfTW8ZT8FuGWerFKRrypvB/jIuZhl0sDhoHi6l4Yrsb6QuJhPLV/IuW1uOQ
X3b1bHpHI6T3yExomXeg+cuu8IKcFjzcq1LLDS3wTnzDQCKhDkbzpC6NylRg
34MgcnDg+r+2fgr79nQYKrY+0HrtR4X6QznluHMaReSqdj1tr4f6jj+w0l6M
7z26Wuy/tUFRn7P17uJ6tNhcFcVxqwq4LDdN4KkSOHKip+NJ1ShsZ5B3MjeM
4AmLLhIzWxmcmW2u+B5RijvV9DgH9i9AuYlmiWj1At514/I+70HFgW+UJgpt
BjhHM0J8tchw0faTnuAJMrrLa3gbsVGQI4Emk5M/BLM5x9O2nOgB+lpzgY9k
Hz4/5Ucc3kGGWs4h46syZGQrCrQe2j8EG4XK8ro/9mNL0QSh/v0Q6gi5GD5+
Mw5GBR+r8cYi7Dl+r/Xw5yX8InNLszWnHX/8CtBvuNcBWY2OrSJbV/Dxo6T5
wXWOqIVQrSpmIiqd2pHP+6QPit+NSVwfngc2bdYKtch5JASXiKyajKBtpGrw
LZVJiBzPvxIZSsNhQomMXxQVBJ5P/00cJ4FL5/fV7bxDaJqczZ1xgUk1fe+b
gIjJVcwasosjjffCo135hRYtvUg+cbz0+z0yfkpszkt+PQqqoQIx71ZPgLX2
cNZ/yem44d+OrVuvMfC3RHPyaMQyzMYYkPZUN2I3r0+ornETcHCz7GosLMPU
k+6dm5ta4ZHoyxNNAjPgJ2Rg/X59nsFvD9W0SXTAkzen32nzN+IbaudnvzQ3
SMhou29aV4p5PO+SeHtWIWnE4u4FbmZCwDWJ+wZ/SsDWnbAqsTccWKwd+KcT
u0HsJ3vXubp+JJaMHHR6VITdDjfs81izoDVTwno+cwiI0DautLjuo0YHuyaF
yUgLMALC/RHwMZXraxDxgqSfvg4be0txQvetuM4kDRjedFlJ2gSe1A8hLMVT
IfdeXQHfk1Fs4Y+c+re7H09gmP5SzQDQR7d7hlObkf/KaZJX7hDceHnDuyuz
FEIKjcffyPzF4An7aeUvDGwX/Rp2cmQV6uTW92A1BwiVrR1xx1zRtOl5UcRl
EowQ7unkVvSjIZH6XuUqFeKZ/ShycjM4yGpz4uTFLmzNuR6/dfcAZOyqygp4
14x80wMvb95pg9HpORnG+5uozy960Uw+E2TLkrhdVilofXhx5iIfBb44cjqk
P+tH3Yenczn9WmBOR/K59h8afGeyoTLdpuJ4lfGP+19+o5mb7Z7MLYhqbzor
d0wt4bYg3XebHBfgVuDBMyYmo6Bw82ZDec8wTl9RpnGPLuA5t1v7/J4vwGqq
ZPBM7AoeOGh9Z7smHQx+9HS37aXBAfrTCIfzs5jac5m4w3UAXXeWF79wHoDt
ax/PCYyQQJExmFdcOogpmQnmvR+aAI6cZRU42oSios6quj2doOTSniZU3IoK
VE/uvVqL8MRTWW9z2Ar+MqWwJ3yqgRA2x/0f7CpQoPrHmYYFFgLr2K+62GhW
VWF4U0rUpALJO3mzwn9UvEnt+UbyKsGiYgUTC8iD3+cevRV9Pgz0b0/8U951
YoDhh3aukGbwEH7xQuJ7LW59pKVDcwoFP39JZ3nHatATzqqzLZgFZfOoEywc
NLRf3SPanj4GJ0tu9xg3juFtOi+fvOsILF2RfHnwwwh+Y5l21v04izphV9tl
HWmQlxGns9qbh0ymH4XaGo2AHMpK/yNcDOUOt7cJfurAXLKtirvoCD5hvx1l
xEkBTSHbb3ZJNMxPnfnku76Hocb3O24RVkDIZ4ux2/4V5KGdFfKJnQQpYbpI
4osxPN6oNqSzYQQEcpOXnUijeG5XQPEhfiKU2X8oHSDVYLfOkNPTmmG4ey36
437NbvRB5aToVCYC3avvMc84s+qlX9fI6xeBujHce2MOjAB10GS6pHoZ9LTo
e6t16HhY0KHJv6sPjlBJP8ZDyHiv9qWR3r4+lChWXk3qb4bE839entEagX2M
zxeCT48iobt0bjWTjimGzSq5Tiswsk1A5fJ3KoZ7vF2IMx0GRbFIz60zfSDq
qq3r0dKNHTvKpKvsFoFsZ2+juHUZvWKCIgW5i0FBaw8x+DUBGacr4qNbmVRb
gzNzd9BXsM7jhWgtz0OQTCr21PUqAkkZirZH5ALIhZq13Tdawpfi/Z1jLhOw
obdz0+WYcTz8haJhFUqGv91FesqC/bgtvqiu16YC2Dg8Uqxi/8DrW1v0a9fn
GuGrwhNtPA1vI/QPPOkugzsjB1T/8ZRh2ocKm7H4ORxSnltk8ZiH8wHeqod4
qdjv5Xs+1nsalkeJe35dSkTXD56Bhu5lwH+O3dJrnAabz7fGGb2ZxUWWliDP
F80oHSIWFhbeCCV/KjYzasfxZMHB4wrsE5DEa22ReXcULp/5Ft4gMInPe29l
tid34cYTLvwFLESQ51cYZFcgATao9e5/T8II8XKfPSYz+HD0ZQ4UzMF192Ep
rbBCTLqYoSYqXQLGMcERo+v+Zl6+0tR2bBDHy55I3eXpgdM9KpL1T/rQYXWP
svVlKmTrdDQQcsfRwd1I501bCV41bPr5kNYL99N649vdB+Bt5o+4M639WK+c
N58qsISMAIXW2T9LYFo9IbdfZwiPsl7QeJM1APpvbEZe9y5Czo1hnznJGfQ7
ZXmdpjOFihWnrI25KBAQN2/QEOsDoWoxu/o3lUJCg1wzTbAW4un8r6a867Dx
VMV//sED8HDs8ZOGPwPoxEFZJbuNQk+sxNDAtUEsM7to9Wh7D3zYsdvzx7lO
ZNjTbxaE1SGtMk2AcSUfvmYv/PjjWAaKj9Otb1yqwptv9tH1c8cwqTTU88LO
UVimc7yQFlnGXPqXrU5cy9DRHefA70PDKU6xj1TbWTDyYivsuFaIkhzcx59I
lYCFpQJztOcytJL12YsaGFjwWY35YQgFd+8dufmmawjSAjdFRsSO4E//5eeH
TEdApe6ZetApGkQEN/0+nzKNWib1PjVbZqBS+SwnxW8OfUzEt/46SsDm7x9r
b/P3AdvFgC3dIRRYkv7yLEt4GLNGyg2bejqwXMExQ0mZCDkxbM1aHBM4kPFB
fkRgFFbry++GfZoCzn3nbkz1TCFn7JI7iWkOBXurD7DvmoEXz8MXhqVagUTJ
4Tl/vBlzcrZx55lPgO435UbvuxM44fuh96D0ECQUtVxJyaHglfurwooDbTDv
uPAxU7Idm18e7bJc9xbXojCu/CcMzGsnmy7dHMNnBhc2ZEuPgY2fMlXeYgFy
3aOu1CesI+Lg9KUFygjyB7IOSFwaAFV1+cPpHoNo9Cjz2c7rZBhlPUC82sKk
+u+Zkk/v8BoatzQY+qqNYKMnR+6NuBF4FSJIet47jCvxDVflpwaBwkUqnU4Z
hvG/orSUwAl067x/OUunDpiKzV5ute3Dj85RpMtsPbASStrepdmFhJYbdeSc
WRx3Z35F95uFz9ntFrlNZGSNjov500KGW5fHx6TLGjGLLysoVbwcQpTlP+84
R8W/KW+WWvOnIcnjbkqQSy7ecrVw5DKvxpPnnMjB0tOYcDpL23DrDGzvYIrc
ruSKVjsOPlURL8VdBxU2f9tSB7Vnr76+Mf0Xf6lJ+3VylkF17l7qWnwFntS4
4DpaM4cy3gd22abPgTqz6fNB6xnoMMgS/bO2iJXv1N8b9pSizZ0jhl055fDx
Fb2+LbgYHI91ym00DAfhV+ytLFuJeK9V5QeTWRdInTDr/vh+Ftnfq/z44zUP
Am/bzATEWFQt6oN5JKKYCE3/bHPpagPYpPrkw6P8AbCjbo5yYNDAsizrqQTL
HA6/aYIvUqUQPhBRkfOyD9vpGZZq6gvwdWWNqLxxFs3k7udd6G9Gdb5n32jV
ZZC962jPK85u3CHkSC3Taocgvt0DsltyYP87CYnSHeX4w2uNfieGAVo5/M1a
2kwEN+Yut6Qt/aAl8QhEijuwVpl9G++mQiQFqKz9tswEjuGGs8KB3XimKGPn
7r4+cBDoYvnOnQncrz0cCEfK0HF1QEjYIBjvHyb6bZMJxZcsPtF9ImtAfmFL
YSExcEZa2+UNrRVv/xZM+PejBOQSbhr6GwygRZnxq8T1+7mqs427xmIW/cg1
k0GCs1CiyB2pYzqL7f82fH97dhGybx7f/eRsMyg+bGGwHGnDhO7FXWLvqaht
576FUEUDXWJ246mvX+DV2Eqmx71MEB7r5Q5o7EClNpogMbwV8lRMz3KtzaDR
qGDuIZlZqB7q05Fhm4AqsX07fmyhooT7gx0mkRRcNU3Q6ksegjdU1YWeqwww
flNOuO6xhvpSZxQyW+dxp8K0hnTRDOy4y3sw23QaVMIOL7VUzOJl35iBUlYy
SrELd0/IkuCe1A/3cEoWNn4Vt8x8WwTvWDks5S80g7LsWsP9/ypxjN0i6hbr
PCQm/yiNXprDDawqqyr3p1CAeLGhqHsUctkbqi16pyFBKUXxTBYNY6r/ZcWo
L2BO8n9vHGJmYSI+WTWJew7rzSn9FZRZoG3jKn3Pv86rEdumvP5Ww5+FKw0/
+svwT92/bCp/MySVRb0NLBiHe/sqvc1Zp7HiwadxWadZXGGVS+AUmgHFjQYR
HVCFyckfVu4ZfsXtRzRotAgKcJsc2t0nMoSfDn9WUv65CIxGWx/kmMek7CTj
DW6taHIusC7Hvg82f93PJThFxDCV3mrTUiKA/btrEpz16/zg+eALpkPY4Oq9
H+5E+DrHmxbg1oFuNmF7Bm/WYSW30LNIai3wVw8O5c8MwdGc4xMTXn3Y/2tS
U1a+B4gy7zm23RvAVR8FXgfRKbxp2VS0ajMJta8kmSSVl/F3S671hO0iqPh5
zSSVT4C83c3P5cUUlOAdfazNF4L8ToMWPx4V4lcbs+KfPb0gHEDcdy+9D530
NT5Oij3DXXwBJzYQUqBbYsRcubwZPZVjeLeHPwPJlZ8X91FZCdPve6cy+lhU
24UDy4sGyoGJ+CRz5G4kpEqbcBertKNBTqDbafluWNh3xdS2eRxOpSWfMZ2c
Rve4W9GStwex+Y5vpM3NXkh/fUF9y0IL7N2sz8HgbMMFwq+zAn6NOEv9FH+n
IAMmJOd6hbLG4BEf822hzVOYd1zhl7p9G0qEHHaisRPAmN+My+vGABwYaTn3
UrJtna9vafgcmgAHC3LjMw4qxvAqvNInDGCnzvWa0sQREBy93K4euoiyVoSa
617LcD7ZpOj7lXpwM3fxNXJpwuZbO1pEUqswmHnvrXrPDjgc84s4LzmIjExJ
+x1dwxC70NchslyHrumsRpG0cHhscPm/LetcEh9kkxSmOIOVn/ly7uwZhm//
kuv5Kyh4e4GvKZt1CvfnNXmffzsFoWnSMRlKo/Dn+L/zI7+H8GuFj6OLUQ+Q
t4bkPojrRyMt8bWkp8mQ9PbWW5e4Qjzv9VE6LptJde1L1aYdpUyEXz/vFrzJ
msMcSfdxA8VFmCUyhIR+LiLH20c+FdYLUOrs/l5zaRx7TpppZZqPQ+WLtHQP
40ZI8LdvNNNdz6vXhss39GuwPC96aTixCVZOT16T1RmGsuz7a+c+DKLN9gep
jvvr4feBrad33GvAFJ3jG/QKhlHKRCManEbBjXKtUreNBH5TmseUmwewe9vS
u8lrbWg91zKvcqsNts/yOJ/+Nww3TpeJc6xzc0nb05FjWhT0C4sihGcPwM0/
d24cEOuG1sPG+iH6XfguJJt03HgAbKjVOZ6Z4xg7dkmx40YzmmqVRXRTCLCx
PFRXoLkJ+bZ8F5RpbYS1HCfjCrNBJARtXFPkHQHXAhOD7ic+8LLmi51ccxba
PNvXXvOtF9MjD3weoK37ar/qvbD6Nkg/b2kkm9GL7oygT3WniUjs+0FrXRyA
W7O/FHxrSNhQPuWhw9YC0nd2MmkrLYOFsnNX1sgK2hfcY7OMHwfFNu+0BLkJ
FE6QjLPtW8EQyYRNZ9KWQCFdwadCn5XQOfPt3vhrVtX3ucunXzjOrPd41bGx
8hmw1f9oJcPVg92JUwFhs0S4HXPhAlP6CuyxPN4cdIGBc2f5eL/HF+LTb9o/
O6kVEL6vKjuGMQ/f1lIj9ofOYRWr6wV9nRIUfXjy5YbJamgbldlwUGQOrVMa
40x9ZmH12fyOUI41uFOkcuHD2xU8kt4uw2k7iHuvXdU7rzIGDN3aTpvnNGBN
XzC5pD2NN3oKq/mezSL3xdNJOVVTwBDu1/MraMXXouz343pqIO+AX1eSRTUy
rg72XLnUCLI5yON/phUczLsO68kMoMS8c7yx8yw4n3L30tWfQ/I13pJaXzo4
X6zXC6MuosYP/aNs6RS4do5zM3sWBV9/KuK4nT+Jl4u2XfnVOwkKZtbSRnYN
yDt+ijY4WwHmfV3OdksN2H6g6vxpqW+gk1bK1hzTB8csGWyuTwYwbvtxu8Rw
Csi9mLF4fHUa3yYekCjtnobdifpjUcfG8enuN2dW3VORy7fdRmZjDiqKpp4N
ICzi7zvsjDGhBdh3bH8iWWUGbQZ/bZ0LmAVMPK51Y3kOvwmVVGjoLsIRwSCt
N99i8PhoyFxBz3dwfUCdqntDAvlUgaCEBTLK9/5erdg1h3zM1rrd9TMgEBSc
E+wdgVlscpJX2mrB1u71Fx7dAXBt6N3Ibt+Daxph8Im5CFYnV63NNIrQsXEw
Qe/zH3SdZnkk4vwPvo8z50nCMigNn6g3EmKg7uMSk/4DtbhqjzRlj3x4Pal+
7EFIF7RyyjXJmQygAtFClrVyCOMnbbc6NQ+DzbUzVz0kupARwVOcJ9cDIYOV
Y38t6yDmibvwTrsmvFHaThoUZVPtIp95U9jJSvA0upV7L7IJDErvXT+88x+G
Hv15TTZuDpaLuPVFgpdQr3+l2k6RiXCBfuV9YBCTamequV2VeA+Oym78dj+2
H9KOyOkxNfQAs5s2u0J1Py5J1X9v7uxExziheozqBOrbpPzF9GaUf1BoV/C9
AXaKmy9IzDeg0rcYW9Z6ImxNe2mptHMZivsufdSJWML/AeKytdQ=
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{None, None}, {None, None}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
        TemplateBox[{
         "\"\\!\\(\\*\\nStyleBox[\\\"\[ScriptR]\\\",\\nFontWeight->\\\"Bold\\\
\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\*\\nStyleBox[\\(\\*\\n StyleBox[\\\
\" \\\",\\nFontWeight->\\\"Bold\\\",\\nFontSlant->\\\"Italic\\\"]\\\\ \
\\)]\\): \"", 
          RowBox[{"-", "0.9902029190735023`"}]}, "RowDefault"], 
        TraditionalForm],
      PlotRange->{{-3.7351641462245464`, 
       3.098685520451218}, {-3.154082485680225, 3.7173515987194596`}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], 
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Tiny], 
         AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVl3c4Fu4Xxq3KLEVRyorCF1HSMM6bWcrICkkZoRIaSIWUpJQSSqUyM0J2
KM5rRbL33u9r8w57/vz+ev55rnM913nuc+77I2LjYniViYGBYYSZgeH/pyl3
mrKKLwlVLlev5h1fhvg1yVXvGyR4VKQUv0X/JWwXF7PZPzmH679eyeh9mYCn
AZvjPr7rRF6mZxd3Sv0FNYP9sqNWM/imSTxRYEcX3GNkPDfxjY5/PN6N2I3M
gidDvLZ+YAlsdZX5MHyHCodG2bO9UonY1Hlh126RZmSvSjlQGFEALLseCsy8
omOQS6xufnoDRB2lsRh9WsLoIGuCw2Qc6EsVUbVD6HBQW6NuUaoft6rqHf68
uQEv2K5eiI3rgOwv0Wf3/aHj3dzeiK1HEO4ZZ/n276wDzhc8fjG5i2hW1Po6
ToqFwK9f27j3dyvOab1xWLMtAXcrN6O/lfdgV+W96dO8XejyN4fHkXMRL9jP
xESfnwU6d2LAP/oAlLI0uGnyDABd87vMroBp9L5nPSW7iQ7LP8zPHGliIPzL
FzpceWAej+btzFkJGcDoq1ZmV5sGMfb71oNipWRcaR2nadLqYXjU8Bo3DwOx
UI6TcDZ1BlKrOz/usB3GK6/t7zoyTYL1/NSc+dFmXEsSlI94OwmePGvFPLcb
sTAjTlXYoBsiTCwO+OYMYR3PQ7beaz9RXf7Hdk03KnxnDn+dtNaPRYwTD59k
dmEzc6haTzMV+KePGP07MAlOT1W3Se3ug1s8wovVAaXguGwV2zT5DJk5HlQc
VmsEDXuWjrCkGSTf+LK5cF8/Mh/6ccBCuBbElVTT57M64FyWree9lFKY6O33
mS+aQb/FylZT7S5w9ybIurwuxvsn67+JkVpg8383TQhSjIQjLxUSd6kzEos2
bf8m7T2FlHfHjB3G6OAeMzWSaNgCMS71jpMSI8hz5bLtl7Ih2MqQlBFFGsCz
ij+mIirLcMTxo3mHRBws1P16HOY6g9Ulg7TrtBXYflxfk/NtJz7bK1HI0NOD
dxUMZJ7/GsGc93qN6Z9WgAGUagcd03Hr2r/StQtTGGseSZ03GMV7HzzV/vOq
R07Ol1MOSIe+Z3eM5XfP4GsLvYU9t8MhOTWQUv1+FH6+HWwlNnWBhOhzEaPp
DMx4V3Zew7ESNp6yLhA/BBE781U46YPIOd+eEcXcD1qlWo9/ZWzUN6maiL42
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
2Pw3mwn63zI5yJYshO2sW+vrBDYRK4zvaB+zqoXEgZcN7a+qUdew+2TiyVK8
P6nS4jbeCK7p2w+Nc2ahKudi4HudOFgXVZoTXfBCxxdiKn5KI8Dw65f4gsIg
xlwLO3GArw4UdT34Al1okN3POy0cSEWx5XE3Z94xbFgaf7+gxEi4m3C0TfZL
FY7PqSzkqudB2YcfxKdlUyjHLZMcx1sOFoyjeQqb+mDE7ePmQb82ZNryolwr
7B82ul3LJiZ04cxgm1udyDCSJ5ILm79QsD8iaFvM0jrY6u6IfOu7jE+JFYoe
3eXo3t8gd8iBBue3s7ymujzCAyURdr9malC/SPV3TfYqPK3U5Gs/Nov9Htzu
oi9GoIVoWEGeJuH+w2SLefN+sNRcG6GXj6HT5Mmj9UhFhl1qmWW+M5A90rsr
uq8Xun7beOrJp2OmQLLDwuNe1P1UOJETMwlsnCnxZB+EF27Kn/3UZ5D/5+Lg
P2kq6ojt8HrAUQ+kaJtfn0e6cEeYXFlBXDe0cMzb1uU0QajhFjUe03w0l2wz
TdxFBPL2uwl3/zZj4MnT2mUGY6ija6Am7UcBLzaI/MkyDMEMBH+1hQ6ki90Q
OL+FDPNfvf7LDlzGcWrz9EzkCNwR6rrezEzCwfaZ0bOjQ5BVZSyXPNOFksHA
orqR2xxYdHYTb1PAyvKlgO2G/zpOMjMpfppAa8m/1tdZFzGJm2tszJyJsGT0
4ubv8/P4ICqMleneIuR8vhVj4zOKdukFwVc3DwInf/LDfUWtyG6u+qbnRxqM
SB/0Ew5sw+5+j+3WjBVwu6LdLfvMML5I8k96kdqIUT9NA1krx9CTEBPWpDYL
PawabcvpX+CXg+/adGQfHOddNz1SMQYvTy2M7TEk4+EArsN8azOY2dVr0eOz
CNKHNh0WTUzDVr7zn7SPN4N3nqde1tZxNGnwr9CTWYX7pqyb0y9RsEmQPzMj
sB/U02a7+IkLyKnGsarE2oGW15ZIW7TaYC0R6udCJlBFzoxYG9UL1m/2mj7S
KsIc2+KkOpYZeN0c5PVAug/5rl4j6/XPgQH3LU/Goz3YLf+96AO0wszCrXnF
9Vk8X/he3mrXEk6YvLxa3sFEcHsfuMtKhYTJyttTl570Qfv5b7bnzEfReXSP
lx1fNewkhX+1mpiG1J+FDzaxUPB3m8KmqxcyUasjbnRlZRRduYJcXSdboXIs
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
2pxp
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{None, None}, {None, None}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
        TemplateBox[{
         "\"\\!\\(\\*\\nStyleBox[\\\"\[ScriptR]\\\",\\nFontWeight->\\\"Bold\\\
\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\*\\nStyleBox[\\(\\*\\n StyleBox[\\\
\" \\\",\\nFontWeight->\\\"Bold\\\",\\nFontSlant->\\\"Italic\\\"]\\\\ \
\\)]\\): \"", 
          RowBox[{"-", "0.7479314608883906`"}]}, "RowDefault"], 
        TraditionalForm],
      PlotRange->{{-2.976544679659269, 
       2.7399779915460445`}, {-3.1541453613655737`, 3.375350296910904}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], 
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Tiny], 
         AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{None, None}, {None, None}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
        TemplateBox[{
         "\"\\!\\(\\*\\nStyleBox[\\\"\[ScriptR]\\\",\\nFontWeight->\\\"Bold\\\
\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\*\\nStyleBox[\\(\\*\\n StyleBox[\\\
\" \\\",\\nFontWeight->\\\"Bold\\\",\\nFontSlant->\\\"Italic\\\"]\\\\ \
\\)]\\): \"", 
          RowBox[{"-", "0.22606946759023916`"}]}, "RowDefault"], 
        TraditionalForm],
      PlotRange->{{-2.8971228578840726`, 
       3.0356209745905702`}, {-3.2883264728884236`, 3.5324139966901313`}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}]},
    {
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Tiny], 
         AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
vI4ySvQGdcyN8D8V0ZfE
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{None, None}, {None, None}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
        TemplateBox[{
         "\"\\!\\(\\*\\nStyleBox[\\\"\[ScriptR]\\\",\\nFontWeight->\\\"Bold\\\
\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\*\\nStyleBox[\\(\\*\\n StyleBox[\\\
\" \\\",\\nFontWeight->\\\"Bold\\\",\\nFontSlant->\\\"Italic\\\"]\\\\ \
\\)]\\): \"", 
          RowBox[{"-", "0.4865560798562952`"}]}, "RowDefault"], 
        TraditionalForm],
      PlotRange->{{-3.1595712365449837`, 
       4.018111839521249}, {-3.0848596678043685`, 3.2144810689414047`}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], 
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Tiny], 
         AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
Ow==
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{None, None}, {None, None}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
        TemplateBox[{
         "\"\\!\\(\\*\\nStyleBox[\\\"\[ScriptR]\\\",\\nFontWeight->\\\"Bold\\\
\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\*\\nStyleBox[\\(\\*\\n StyleBox[\\\
\" \\\",\\nFontWeight->\\\"Bold\\\",\\nFontSlant->\\\"Italic\\\"]\\\\ \
\\)]\\): \"", "0.010449222688000052`"}, "RowDefault"], TraditionalForm],
      PlotRange->{{-2.8716449579032295`, 
       2.799779551966529}, {-2.9744045153205474`, 3.9850499736495086`}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], 
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Tiny], 
         AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
uuc=
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{None, None}, {None, None}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
        TemplateBox[{
         "\"\\!\\(\\*\\nStyleBox[\\\"\[ScriptR]\\\",\\nFontWeight->\\\"Bold\\\
\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\*\\nStyleBox[\\(\\*\\n StyleBox[\\\
\" \\\",\\nFontWeight->\\\"Bold\\\",\\nFontSlant->\\\"Italic\\\"]\\\\ \
\\)]\\): \"", "0.2904124848123526`"}, "RowDefault"], TraditionalForm],
      PlotRange->{{-2.883108517432581, 
       3.606675941002827}, {-3.270614613095823, 2.7067760853728187`}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}]},
    {
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Tiny], 
         AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
ZcMs
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{None, None}, {None, None}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
        TemplateBox[{
         "\"\\!\\(\\*\\nStyleBox[\\\"\[ScriptR]\\\",\\nFontWeight->\\\"Bold\\\
\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\*\\nStyleBox[\\(\\*\\n StyleBox[\\\
\" \\\",\\nFontWeight->\\\"Bold\\\",\\nFontSlant->\\\"Italic\\\"]\\\\ \
\\)]\\): \"", "0.5208743794851545`"}, "RowDefault"], TraditionalForm],
      PlotRange->{{-3.8075818950799873`, 
       4.239300404890165}, {-3.90283793868399, 2.889919880973942}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], 
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Tiny], 
         AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{None, None}, {None, None}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
        TemplateBox[{
         "\"\\!\\(\\*\\nStyleBox[\\\"\[ScriptR]\\\",\\nFontWeight->\\\"Bold\\\
\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\*\\nStyleBox[\\(\\*\\n StyleBox[\\\
\" \\\",\\nFontWeight->\\\"Bold\\\",\\nFontSlant->\\\"Italic\\\"]\\\\ \
\\)]\\): \"", "0.7728231102691876`"}, "RowDefault"], TraditionalForm],
      PlotRange->{{-3.445478481141891, 
       4.129357812170042}, {-3.4998050110407437`, 3.241929575751458}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], 
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Tiny], 
         AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{None, None}, {None, None}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
        TemplateBox[{
         "\"\\!\\(\\*\\nStyleBox[\\\"\[ScriptR]\\\",\\nFontWeight->\\\"Bold\\\
\",\\nFontSlant->\\\"Italic\\\"]\\)\\!\\(\\*\\nStyleBox[\\(\\*\\n StyleBox[\\\
\" \\\",\\nFontWeight->\\\"Bold\\\",\\nFontSlant->\\\"Italic\\\"]\\\\ \
\\)]\\): \"", "0.9903456546222326`"}, "RowDefault"], TraditionalForm],
      PlotRange->{{-3.005322854947602, 
       3.186993462556886}, {-3.0527550151649834`, 3.4395796113160815`}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.7074978664433823`*^9, 3.7075446193135*^9, 
  3.707729235557601*^9, 3.708200301391*^9},
 CellLabel->
  "Out[196]=",ExpressionUUID->"3c97f718-8011-4dd2-8f9b-1319a4451f52"]
}, {2}]],

Cell["\<\
Exploring Correlation
\
\>", "Text",
 CellChangeTimes->{{3.7082058479744997`*^9, 3.7082058621815*^9}, {
  3.7082059249065*^9, 
  3.7082059262475*^9}},ExpressionUUID->"cee7e2f3-9342-458b-97c4-b39f6c615f7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "=", 
     RowBox[{"Transpose", "[", "xy", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"xylim", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"minx", "=", 
          RowBox[{
           RowBox[{"Min", "[", "x", "]"}], "-", 
           RowBox[{"f", "*", "eps"}]}]}], ",", 
         RowBox[{"maxx", "=", 
          RowBox[{
           RowBox[{"Max", "[", "x", "]"}], "+", 
           RowBox[{"f", "*", "eps"}]}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Min", "[", "y", "]"}], "-", 
          RowBox[{"f", "*", "eps"}]}], ",", 
         RowBox[{
          RowBox[{"Max", "[", "y", "]"}], "+", 
          RowBox[{"f", "*", "eps"}]}]}], "}"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"r", "=", 
     RowBox[{"Correlation", "[", 
      RowBox[{"Sequence", "@@", 
       RowBox[{"(", 
        RowBox[{"xy", "//", "Transpose"}], ")"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"LSLine", "=", 
     RowBox[{"If", "[", 
      RowBox[{"LSQ", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ans", "=", 
         RowBox[{"Fit", "[", 
          RowBox[{"xy", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "\[ScriptX]"}], "}"}], ",", "\[ScriptX]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[Alpha]LS", ",", "\[Beta]LS"}], "}"}], "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"First", "[", "ans", "]"}], ",", 
           RowBox[{"First", "[", 
            RowBox[{"Last", "[", "ans", "]"}], "]"}]}], "}"}]}], ";", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "Large", "]"}], ",", 
          RowBox[{"Darker", "[", "Green", "]"}], ",", 
          RowBox[{"Opacity", "[", "1", "]"}], ",", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"minx", ",", 
               RowBox[{"\[Alpha]LS", "+", 
                RowBox[{"\[Beta]LS", "*", "minx"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"maxx", ",", 
               RowBox[{"\[Alpha]LS", "+", 
                RowBox[{"\[Beta]LS", "*", "maxx"}]}]}], "}"}]}], "}"}], 
           "]"}]}], "}"}]}], ",", 
       RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"epi", "=", 
     RowBox[{"{", "LSLine", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"ListPlot", "[", 
     RowBox[{"xy", ",", "\[IndentingNewLine]", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"ColorData", "[", "1", "]"}], "[", "1", "]"}], ",", 
         RowBox[{"PointSize", "[", "Large", "]"}], ",", 
         RowBox[{"Point", "[", "xy", "]"}]}], "}"}]}], ",", 
      RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
      RowBox[{"Frame", "\[Rule]", "True"}], ",", 
      RowBox[{"Axes", "\[Rule]", "False"}], ",", 
      RowBox[{"PlotRange", "\[Rule]", "xylim"}], ",", 
      RowBox[{"FrameLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"X", ",", "Y"}], "}"}]}], ",", 
      RowBox[{"RotateLabel", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
      RowBox[{"PlotLabel", "\[Rule]", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"\"\<r\>\"", ",", "Italic"}], "]"}], ",", "\"\< = \>\"", 
          ",", 
          RowBox[{"NumberForm", "[", 
           RowBox[{"r", ",", 
            RowBox[{"{", 
             RowBox[{"6", ",", "4"}], "}"}]}], "]"}]}], "}"}], "]"}]}], ",", 
      RowBox[{"ImageSize", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"400", ",", "400"}], "}"}]}], ",", 
      RowBox[{"Epilog", "\[Rule]", "epi"}], ",", 
      RowBox[{"ImagePadding", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"35", ",", "10"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"35", ",", "10"}], "}"}]}], "}"}]}]}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"LSQ", ",", "True", ",", 
       RowBox[{"Style", "[", 
        RowBox[{"\"\<LS line\>\"", ",", 
         RowBox[{"Darker", "[", "Green", "]"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}], ",", 
     RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xy", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", "6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"7", ",", "7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"8", ",", "8"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"9", ",", "9"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"29.5804", ",", 
           RowBox[{"-", "29.5804"}]}], "}"}]}], "}"}]}], "}"}], ",", 
     "Locator", ",", 
     RowBox[{"LocatorAutoCreate", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "\[Infinity]"}], "}"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"eps", ",", "1.25"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"f", ",", "3.0"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
         "8", ",", "9", ",", "29.5804`"}], "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
         "8", ",", "9", ",", 
         RowBox[{"-", "29.5804`"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", 
     RowBox[{"xy", ",", "LSQ", ",", "L1Q", ",", "RLQ"}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Initialization", "\[RuleDelayed]", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"AndrewsData", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", "6"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"7", ",", "7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"8", ",", "8"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"9", ",", "9"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"29.5804", ",", 
           RowBox[{"-", "29.5804"}]}], "}"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "L1Fit", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"L1Fit", "[", "xy_", "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\[ScriptN]", "=", 
            RowBox[{"Length", "[", "xy", "]"}]}], ",", "xy0", ",", "X", ",", 
           "Y", ",", "rhs", ",", "c", ",", "ind", ",", "m", ",", "ans"}], 
          "}"}], ",", 
         RowBox[{
          RowBox[{"xy0", "=", 
           RowBox[{"N", "[", "xy", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"X", ",", "Y"}], "}"}], "=", 
           RowBox[{"Transpose", "[", "xy0", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"rhs", "=", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{"Riffle", "[", 
              RowBox[{"Y", ",", 
               RowBox[{"Table", "[", 
                RowBox[{"0", ",", 
                 RowBox[{"{", "\[ScriptN]", "}"}]}], "]"}]}], "]"}], ",", 
             "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"c", "=", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.0", ",", "0.0", ",", "0.0", ",", "0.0"}], "}"}], ",", 
             RowBox[{"Table", "[", 
              RowBox[{"1.0", ",", 
               RowBox[{"{", 
                RowBox[{"2", " ", "\[ScriptN]"}], "}"}]}], "]"}]}], "]"}]}], 
          ";", 
          RowBox[{
           RowBox[{"ind", "[", "i_", "]"}], ":=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"j", "\[Equal]", "i"}], ",", 
               RowBox[{"{", 
                RowBox[{"1.0", ",", 
                 RowBox[{"-", "1.0"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0.0", ",", "0.0"}], "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "\[ScriptN]"}], "}"}]}], "]"}]}], ";", 
          RowBox[{"m", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{"1.0", ",", 
                RowBox[{"-", "1.0"}], ",", 
                RowBox[{
                "X", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
                ",", 
                RowBox[{"-", 
                 RowBox[{
                 "X", "\[LeftDoubleBracket]", "i", 
                  "\[RightDoubleBracket]"}]}], ",", 
                RowBox[{"ind", "[", "i", "]"}]}], "}"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "\[ScriptN]"}], "}"}]}], "]"}]}], ";", 
          RowBox[{"ans", "=", 
           RowBox[{"LinearProgramming", "[", 
            RowBox[{"c", ",", "m", ",", "rhs"}], "]"}]}], ";", 
          RowBox[{
           RowBox[{
            RowBox[{"Subtract", "[", 
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], ",", 
              RowBox[{"Last", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"ans", ",", "4"}], "]"}], ",", "2"}], "]"}]}]}]}], 
        "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     ")"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{3.7082057694605*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"94e7c6ba-028d-4243-8407-291686ab67fb"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`eps$$ = 1.25, $CellContext`f$$ = 
    3., $CellContext`LSQ$$ = True, $CellContext`x$$ = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 29.5804}, $CellContext`xy$$ = {{1, 1}, {2, 
     2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {
     29.5804, -29.5804}}, $CellContext`y$$ = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, -29.5804}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`LSQ$$], True, 
       Style["LS line", 
        RGBColor[0, 
         Rational[2, 3], 0]]}, {False, True}}, {{
       Hold[$CellContext`xy$$], {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 
        6}, {7, 7}, {8, 8}, {9, 9}, {29.5804, -29.5804}}}, Automatic}, {{
       Hold[$CellContext`eps$$], 1.25}}, {{
       Hold[$CellContext`f$$], 3.}}, {{
       Hold[$CellContext`x$$], {1, 2, 3, 4, 5, 6, 7, 8, 9, 29.5804}}}, {{
       Hold[$CellContext`y$$], {1, 2, 3, 4, 5, 6, 7, 8, 9, -29.5804}}}}, 
    Typeset`size$$ = {600., {296., 304.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`LSQ$41399$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`eps$$ = 1.25, $CellContext`f$$ = 
        3., $CellContext`LSQ$$ = 
        True, $CellContext`x$$ = {
         1, 2, 3, 4, 5, 6, 7, 8, 9, 29.5804}, $CellContext`xy$$ = {{1, 1}, {2,
           2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {
          29.5804, -29.5804}}, $CellContext`y$$ = {
         1, 2, 3, 4, 5, 6, 7, 8, 9, -29.5804}}, "ControllerVariables" :> {
        Hold[$CellContext`LSQ$$, $CellContext`LSQ$41399$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ({$CellContext`x$$, $CellContext`y$$} = 
        Transpose[$CellContext`xy$$]; $CellContext`xylim = \
{{$CellContext`minx = 
           Min[$CellContext`x$$] - $CellContext`f$$ $CellContext`eps$$, \
$CellContext`maxx = 
           Max[$CellContext`x$$] + $CellContext`f$$ $CellContext`eps$$}, {
          Min[$CellContext`y$$] - $CellContext`f$$ $CellContext`eps$$, 
           Max[$CellContext`y$$] + $CellContext`f$$ $CellContext`eps$$}}; \
$CellContext`r = Correlation[
          Apply[Sequence, 
           Transpose[$CellContext`xy$$]]]; $CellContext`LSLine = 
        If[$CellContext`LSQ$$, $CellContext`ans = 
           Fit[$CellContext`xy$$, {
             1, $CellContext`\[ScriptX]}, $CellContext`\[ScriptX]]; \
{$CellContext`\[Alpha]LS, $CellContext`\[Beta]LS} = {
             First[$CellContext`ans], 
             First[
              Last[$CellContext`ans]]}; {
            Thickness[Large], 
            Darker[Green], 
            Opacity[1], 
            
            Line[{{$CellContext`minx, $CellContext`\[Alpha]LS + $CellContext`\
\[Beta]LS $CellContext`minx}, {$CellContext`maxx, $CellContext`\[Alpha]LS + \
$CellContext`\[Beta]LS $CellContext`maxx}}]}, {}]; $CellContext`epi = \
{$CellContext`LSLine}; ListPlot[$CellContext`xy$$, PlotStyle -> {
           ColorData[1][1], 
           PointSize[Large], 
           Point[$CellContext`xy$$]}, AspectRatio -> 1, Frame -> True, Axes -> 
         False, PlotRange -> $CellContext`xylim, 
         FrameLabel -> {$CellContext`X, $CellContext`Y}, RotateLabel -> False,
          PlotLabel -> Row[{
            Style["r", Italic], " = ", 
            NumberForm[$CellContext`r, {6, 4}]}], ImageSize -> {400, 400}, 
         Epilog -> $CellContext`epi, ImagePadding -> {{35, 10}, {35, 10}}]), 
      "Specifications" :> {{{$CellContext`LSQ$$, True, 
          Style["LS line", 
           RGBColor[0, 
            Rational[2, 3], 0]]}, {False, True}, ControlPlacement -> Left, 
         ImageSize -> 
         Tiny}, {{$CellContext`xy$$, {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 
           5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {29.5804, -29.5804}}}, 
         Automatic, ControlType -> Locator, LocatorAutoCreate -> {3, 
           DirectedInfinity[1]}}, {{$CellContext`eps$$, 1.25}, ControlType -> 
         None}, {{$CellContext`f$$, 3.}, ControlType -> 
         None}, {{$CellContext`x$$, {1, 2, 3, 4, 5, 6, 7, 8, 9, 29.5804}}, 
         ControlType -> 
         None}, {{$CellContext`y$$, {1, 2, 3, 4, 5, 6, 7, 8, 9, -29.5804}}, 
         ControlType -> None}}, 
      "Options" :> {
       AutorunSequencing -> {1, 2, 3}, 
        TrackedSymbols :> {$CellContext`xy$$, $CellContext`LSQ$$, \
$CellContext`L1Q, $CellContext`RLQ}}, "DefaultOptions" :> {}],
     ImageSizeCache->{777., {346., 355.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`AndrewsData = {{1, 1}, {2, 2}, {3, 3}, {4, 
         4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}, {9, 9}, {
         29.5804, -29.5804}}; $CellContext`L1Fit[
         Pattern[$CellContext`xy, 
          Blank[]]] := 
       Module[{$CellContext`\[ScriptN] = 
          Length[$CellContext`xy], $CellContext`xy0, $CellContext`X, \
$CellContext`Y, $CellContext`rhs, $CellContext`c, $CellContext`ind, \
$CellContext`m, $CellContext`ans}, $CellContext`xy0 = 
          N[$CellContext`xy]; {$CellContext`X, $CellContext`Y} = 
          Transpose[$CellContext`xy0]; $CellContext`rhs = Partition[
            Riffle[$CellContext`Y, 
             Table[0, {$CellContext`\[ScriptN]}]], 2]; $CellContext`c = 
          Join[{0., 0., 0., 0.}, 
            Table[1., {2 $CellContext`\[ScriptN]}]]; $CellContext`ind[
            Pattern[$CellContext`i, 
             Blank[]]] := Table[
            
            If[$CellContext`j == $CellContext`i, {1., -1.}, {0., 
             0.}], {$CellContext`j, $CellContext`\[ScriptN]}]; $CellContext`m = 
          Table[
            Flatten[{1., -1., 
              Part[$CellContext`X, $CellContext`i], -
              Part[$CellContext`X, $CellContext`i], 
              $CellContext`ind[$CellContext`i]}], {$CellContext`i, \
$CellContext`\[ScriptN]}]; $CellContext`ans = 
          LinearProgramming[$CellContext`c, $CellContext`m, $CellContext`rhs]; 
         Map[Subtract[
            First[#], 
            Last[#]]& , 
           Partition[
            Take[$CellContext`ans, 4], 2]]]; Null); Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.7082058930695*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"3f73a181-cf2b-4ba9-bdeb-0e44325fba05"]
}, {2}]],

Cell["\<\
Example: Does therapy (Behavioral or Family) at an anorexia treatment center \
help us make any predictions on the exit weight of young female patients, \
given a starting weight?\
\>", "Subsection",
 CellChangeTimes->{
  3.707544641282*^9, 3.7075513304014997`*^9, {3.7076838666520033`*^9, 
   3.7076840462771044`*^9}},ExpressionUUID->"53edb94e-c79b-4a38-857e-\
ad02c8c5818f"],

Cell[TextData[StyleBox["The data below shows the before and after weight of \
young women undergoing anorexia treatment. When you look at the data, what \
kind of questions might you ask?", "Text"]], "Input",
 CellChangeTimes->{{3.7074154338737884`*^9, 
  3.7074154568064613`*^9}},ExpressionUUID->"a25b98bd-3785-402f-ad1c-\
af42369c0494"],

Cell["\<\
Obtain data from Wolfram Repository: Before and after weight of young women \
undergoing anorexia treatment. \
\>", "Text",
 CellChangeTimes->{{3.700774271565714*^9, 3.70077428101515*^9}, {
  3.70510436631329*^9, 3.705104402940385*^9}, {3.7051044918334694`*^9, 
  3.705104547547656*^9}, {3.705104583096689*^9, 3.7051045898510756`*^9}, {
  3.705105030495279*^9, 3.70510503226538*^9}, {3.7051051046345196`*^9, 
  3.7051052440884957`*^9}, {3.7069984648464584`*^9, 3.70699853510876*^9}, {
  3.7069985809546037`*^9, 3.706998637089361*^9}, {3.707082621704*^9, 
  3.707082646561*^9}, {3.7075513339425*^9, 3.7075513356549997`*^9}, {
  3.707578219779233*^9, 
  3.7075782299742527`*^9}},ExpressionUUID->"5ceedab0-02da-47fa-896d-\
c1c0fc015ccd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"datas", "=", 
   RowBox[{
   "ResourceData", "[", "\"\<Sample Data: Anorexia Treatment\>\"", "]"}]}], 
  "\n"}]], "Input",
 CellChangeTimes->{{3.700774255707568*^9, 3.70077426783818*^9}, {
   3.7051044212184305`*^9, 3.705104469954218*^9}, {3.705105265576725*^9, 
   3.7051053685916166`*^9}, {3.705105596267639*^9, 3.705105691655095*^9}, {
   3.7056842975415497`*^9, 3.705684356018416*^9}, 3.7069983463374586`*^9, {
   3.7069997043281593`*^9, 3.706999705555648*^9}, {3.706999984674889*^9, 
   3.706999992187389*^9}, {3.707000115817889*^9, 3.707000144424889*^9}, {
   3.7070457911109257`*^9, 3.7070458374065256`*^9}, {3.7070459208589263`*^9, 
   3.7070459293333263`*^9}, {3.707080943041*^9, 3.7070809449700003`*^9}, {
   3.7071261793841143`*^9, 3.7071261802354145`*^9}, {3.707128733932125*^9, 
   3.7071287520844254`*^9}, 3.7072125159881067`*^9, 3.7074138127117586`*^9, {
   3.7075512061785*^9, 3.7075512085769997`*^9}, 3.7075628465430565`*^9, 
   3.7075779211176577`*^9, 3.7075911494618006`*^9, {3.7076840559470043`*^9, 
   3.707684057036004*^9}, 3.708200303575*^9, {3.708213327296*^9, 
   3.708213346896*^9}},
 CellLabel->
  "In[211]:=",ExpressionUUID->"9fc50556-ca08-4efd-b29e-2fa56054d09d"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 72, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Treatment", "EntryWeight", "ExitWeight"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["CBT", "Cont", "FT"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]]}], 72], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Treatment"} -> 1, {All, "EntryWeight"} -> 
           1, {All, "ExitWeight"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Treatment" -> TypeSystem`PackageScope`AtomShape[36.], 
              "EntryWeight" -> TypeSystem`PackageScope`AtomShape[75], 
              "ExitWeight" -> TypeSystem`PackageScope`AtomShape[75]]]], 
           20, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1998804830], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Treatment", "EntryWeight", "ExitWeight"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["CBT", "Cont", "FT"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]]}], 72], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1998804830]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Treatment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Treatment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1840149471][{All, "Treatment"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[All, "Treatment"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"EntryWeight\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"EntryWeight\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1840149471][{All, "EntryWeight"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[All, "EntryWeight"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ExitWeight\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ExitWeight\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1840149471][{All, "ExitWeight"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[All, "ExitWeight"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[1, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[1, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[1, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[2, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"89.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[2, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[2, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[3, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"91.8`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[3, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[3, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[4, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"74", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[4, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[4, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[5, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"78.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[5, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"76.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[5, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[6, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"88.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[6, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"78.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[6, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[7, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"87.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[7, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"75.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[7, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[8, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"75.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[8, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[8, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[9, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[9, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"73.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[9, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[10, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"78.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[10, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"84.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[10, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[11, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[11, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[11, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[12, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"88.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[12, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"79.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[12, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[13, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[13, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"89.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[13, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[14, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"78.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[14, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[14, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[15, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"70.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[15, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.8`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[15, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[16, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[16, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[16, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[17, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"85.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[17, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"84.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[17, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[18, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[18, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"75.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[18, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[19, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"84.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[19, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"79.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[19, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[20, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"79.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[20, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"73", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
                  GeneralUtilities`Slice[20, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Deploy[
                 Mouseover[
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    72 (-20), {1, 72 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 72 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    72, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 72 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    72 20, {1, 72 - 20 + 1}])}]}, "   "], 
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    72 (-20), {1, 72 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 72 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    72, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 72 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    72 20, {1, 72 - 20 + 1}])}]}, "   "]]], Background -> 
                GrayLevel[0.98], Alignment -> {Left, Top}, 
                BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1840149471},
                     1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1840149471},
                     10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1840149471},
                     30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1840149471},
                     100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1840149471},
                     100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft, SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1840149471][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1840149471]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1840149471][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {380., {403.5, 412.5}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.708200306053*^9, {3.708213322199*^9, 3.708213350318*^9}},
 CellLabel->
  "Out[211]=",ExpressionUUID->"0833abdf-9c83-4cff-9bb0-f0557c8f14d5"]
}, Open  ]],

Cell["\<\
By simply looking at data in a table, it can be difficult to observe whether \
or not there is a linear relationship between the entry weight and exit \
weight of the young female patients. A scatter diagram can help us to \
visualize the distribution of the data. For this example, we will examine \
data obtained from patients who received Behavioral Cognitive Therapy, Family \
Therapy, and a control group.
\
\>", "Text",
 CellChangeTimes->{{3.705683964567428*^9, 3.705683981488122*^9}, {
   3.7069986541605515`*^9, 3.706998654998085*^9}, {3.707000305691889*^9, 
   3.707000328780889*^9}, 3.707000362116889*^9, {3.7070772116597505`*^9, 
   3.7070772124566708`*^9}, {3.707080954921*^9, 3.707081301332*^9}, {
   3.7070813656070004`*^9, 3.707081419105*^9}, {3.707111632065*^9, 
   3.7071116438789997`*^9}, {3.7074119180960445`*^9, 3.707411973820711*^9}, {
   3.7074120559315567`*^9, 3.7074120925830274`*^9}, {3.707414400803703*^9, 
   3.707414405216004*^9}, {3.707544474432*^9, 3.7075444836075*^9}, {
   3.707577933818658*^9, 3.707577963271658*^9}, {3.7076840714418044`*^9, 
   3.7076840941890044`*^9}, {3.7076841262871046`*^9, 
   3.7076841954148054`*^9}},ExpressionUUID->"e27a1f1d-65d0-4aa6-8db6-\
c227b459b703"],

Cell[TextData[StyleBox["Select control data", "Code"]], "Text",
 CellChangeTimes->{{3.707578422024455*^9, 
  3.707578445112764*^9}},ExpressionUUID->"616bcc55-5509-4373-a31b-\
27b7a3cb82ec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"controlData", "=", 
  RowBox[{"datas", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"#Treatment", " ", "==", " ", "\"\<Cont\>\""}], " ", "&"}], 
    "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7075731728033*^9, 3.7075731757913003`*^9}, {
   3.7075732445395*^9, 3.7075732626567*^9}, {3.7075733414503*^9, 
   3.7075734199054008`*^9}, 3.707573557957301*^9, 3.707578484670719*^9, {
   3.70757852243267*^9, 3.7075785347931995`*^9}, {3.7076885852530117`*^9, 
   3.7076885866965113`*^9}, 3.708200311686*^9, 3.708213356416*^9},
 CellLabel->
  "In[212]:=",ExpressionUUID->"4dafd5f0-e488-472b-9026-df7ecb017c38"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 26, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Treatment", "EntryWeight", "ExitWeight"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["CBT", "Cont", "FT"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]]}], 26], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Treatment"} -> 1, {All, "EntryWeight"} -> 
           1, {All, "ExitWeight"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Treatment" -> TypeSystem`PackageScope`AtomShape[36.], 
              "EntryWeight" -> TypeSystem`PackageScope`AtomShape[75], 
              "ExitWeight" -> TypeSystem`PackageScope`AtomShape[75]]]], 
           20, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[915965230], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Treatment", "EntryWeight", "ExitWeight"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["CBT", "Cont", "FT"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]]}], 26], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[915965230]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Treatment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Treatment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1931188707][{All, "Treatment"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[All, "Treatment"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"EntryWeight\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"EntryWeight\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1931188707][{All, "EntryWeight"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[All, "EntryWeight"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ExitWeight\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ExitWeight\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1931188707][{All, "ExitWeight"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[All, "ExitWeight"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[1, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[1, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[1, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[2, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"89.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[2, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[2, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[3, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"91.8`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[3, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[3, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[4, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"74", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[4, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[4, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[5, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"78.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[5, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"76.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[5, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[6, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"88.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[6, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"78.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[6, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[7, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"87.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[7, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"75.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[7, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[8, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"75.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[8, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[8, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[9, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[9, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"73.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[9, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[10, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"78.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[10, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"84.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[10, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[11, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[11, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[11, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[12, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"88.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[12, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"79.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[12, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[13, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[13, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"89.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[13, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[14, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"78.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[14, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[14, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[15, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"70.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[15, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.8`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[15, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[16, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[16, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[16, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[17, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"85.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[17, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"84.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[17, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[18, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[18, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"75.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[18, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[19, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"84.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[19, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"79.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[19, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cont", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[20, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"79.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[20, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"73", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
                  GeneralUtilities`Slice[20, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Deploy[
                 Mouseover[
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    26 (-20), {1, 26 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 26 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    26, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 26 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    26 20, {1, 26 - 20 + 1}])}]}, "   "], 
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    26 (-20), {1, 26 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 26 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    26, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 26 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    26 20, {1, 26 - 20 + 1}])}]}, "   "]]], Background -> 
                GrayLevel[0.98], Alignment -> {Left, Top}, 
                BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1931188707},
                     1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1931188707},
                     10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1931188707},
                     30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1931188707},
                     100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1931188707},
                     100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft, SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1931188707][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1931188707]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1931188707][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {380., {403.5, 412.5}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.7082003126359997`*^9, 3.708213357877*^9},
 CellLabel->
  "Out[212]=",ExpressionUUID->"303862ba-1d7e-41c7-bd00-19497b063f27"]
}, Open  ]],

Cell["Find the number of samples in the control group", "Text",
 CellChangeTimes->{{3.7076887187230115`*^9, 
  3.7076887448370113`*^9}},ExpressionUUID->"373db6c7-43d1-4279-8813-\
19ceca14be74"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "controlData", "]"}]], "Input",
 CellChangeTimes->{{3.7076885892015114`*^9, 3.7076885942675114`*^9}, {
  3.7076886593440113`*^9, 3.7076886615450115`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"93a0f562-4552-4466-94c2-4e04fa39677d"],

Cell[BoxData["26"], "Output",
 CellChangeTimes->{3.7076885952600117`*^9, 3.707688662457512*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"dc1112ee-ddba-4b4b-8530-28a7968162c7"]
}, Open  ]],

Cell[TextData[StyleBox["Select Behavioral Cognitive Treatment data", \
"Code"]], "Text",
 CellChangeTimes->{{3.7075784914770727`*^9, 3.7075785073358483`*^9}, {
  3.707684218536405*^9, 
  3.7076842312623053`*^9}},ExpressionUUID->"bfd8bc90-1d16-4e2c-b176-\
951276364436"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"btreatmentData", "=", 
  RowBox[{"datas", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"#Treatment", " ", ",", 
       RowBox[{"Alternatives", "[", "\"\<CBT\>\"", "]"}]}], "]"}], "&"}], 
    "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7075731728033*^9, 3.7075731757913003`*^9}, {
   3.7075732445395*^9, 3.7075732626567*^9}, {3.7075733414503*^9, 
   3.707573485808401*^9}, {3.707573696874401*^9, 3.7075737849597015`*^9}, 
   3.7075785125877266`*^9, {3.7075785443915467`*^9, 3.707578549792924*^9}, {
   3.707591759859002*^9, 3.7075917994158025`*^9}, 3.708200318906*^9, 
   3.708213364421*^9},
 CellLabel->
  "In[213]:=",ExpressionUUID->"693eb1be-c579-4513-b0b8-c609296055f7"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 29, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Treatment", "EntryWeight", "ExitWeight"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["CBT", "Cont", "FT"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]]}], 29], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Treatment"} -> 1, {All, "EntryWeight"} -> 
           1, {All, "ExitWeight"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Treatment" -> TypeSystem`PackageScope`AtomShape[36.], 
              "EntryWeight" -> TypeSystem`PackageScope`AtomShape[75], 
              "ExitWeight" -> TypeSystem`PackageScope`AtomShape[75]]]], 
           20, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1825950464], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Treatment", "EntryWeight", "ExitWeight"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["CBT", "Cont", "FT"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]]}], 29], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1825950464]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Treatment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Treatment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137][{
                    All, "Treatment"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[All, "Treatment"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"EntryWeight\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"EntryWeight\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137][{
                    All, "EntryWeight"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[All, "EntryWeight"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ExitWeight\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ExitWeight\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137][{
                    All, "ExitWeight"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[All, "ExitWeight"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[1, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[1, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"82.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[1, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[2, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"84.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[2, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"85.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[2, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[3, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[3, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[3, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[4, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"82.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[4, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[4, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[5, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"79.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[5, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"76.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[5, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[6, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"88.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[6, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"103.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[6, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[7, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"94.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[7, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"98.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[7, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[8, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"76.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[8, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"93.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[8, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[9, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[9, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"73.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[9, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[10, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[10, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"82.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[10, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[11, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"85", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[11, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"96.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[11, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[12, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"89.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[12, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"95.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[12, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[13, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[13, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"82.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[13, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[14, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"76.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[14, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"72.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[14, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[15, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"70", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[15, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"90.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[15, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[16, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[16, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"71.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[16, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[17, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"83.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[17, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"85.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[17, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[18, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"83", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[18, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[18, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[19, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"87.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[19, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"89.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[19, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["CBT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[20, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"84.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[20, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"83.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
                  GeneralUtilities`Slice[20, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Deploy[
                 Mouseover[
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    29 (-20), {1, 29 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 29 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    29, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 29 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    29 20, {1, 29 - 20 + 1}])}]}, "   "], 
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    29 (-20), {1, 29 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 29 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    29, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 29 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    29 20, {1, 29 - 20 + 1}])}]}, "   "]]], Background -> 
                GrayLevel[0.98], Alignment -> {Left, Top}, 
                BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137}, 
                    1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137}, 
                    10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137}, 
                    30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137}, 
                    100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137}, 
                    100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft, SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 793987137]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[793987137][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {380., {403.5, 412.5}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.708200319934*^9, 3.708213367443*^9},
 CellLabel->
  "Out[213]=",ExpressionUUID->"6b4be3e0-b913-4982-9205-41fa0bd78a2b"]
}, Closed]],

Cell["\<\
Find the number of samples in the Behavioral Cognitive Treatment group\
\>", "Text",
 CellChangeTimes->{
  3.7076888420650115`*^9},ExpressionUUID->"480ae3cc-f0b9-4305-b5df-\
06a31ae406c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "btreatmentData", "]"}]], "Input",
 CellChangeTimes->{{3.7076886044980116`*^9, 3.7076886094915113`*^9}, {
  3.7076886658800116`*^9, 3.7076886812460117`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"417fd188-1ffc-4227-980f-4181a9d74814"],

Cell[BoxData["29"], "Output",
 CellChangeTimes->{
  3.7076886098115115`*^9, {3.7076886707680116`*^9, 3.7076886816410117`*^9}},
 CellLabel->"Out[53]=",ExpressionUUID->"8a60b6ed-4195-4663-98f1-2968585851c7"]
}, Open  ]],

Cell[TextData[StyleBox["Select Family Therapy Data", "Code"]], "Text",
 CellChangeTimes->{{3.7076842483118057`*^9, 
  3.7076842633305054`*^9}},ExpressionUUID->"a6e1949e-8a4b-4984-928b-\
370e436f9b5c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ftreatmentData", "=", 
  RowBox[{"datas", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"#Treatment", " ", ",", 
       RowBox[{"Alternatives", "[", "\"\<FT\>\"", "]"}]}], "]"}], "&"}], 
    "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7075917925970025`*^9, 3.707591807898402*^9}, {
   3.7075922098086033`*^9, 3.7075922206535034`*^9}, 3.708200323361*^9, 
   3.708213374689*^9},
 CellLabel->
  "In[214]:=",ExpressionUUID->"99e73bdf-0c25-4418-bd4a-cce6f24bade2"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 17, "Length" -> 17, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Treatment", "EntryWeight", "ExitWeight"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["CBT", "Cont", "FT"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]]}], 17], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Treatment"} -> 1, {All, "EntryWeight"} -> 
           1, {All, "ExitWeight"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Treatment" -> TypeSystem`PackageScope`AtomShape[36.], 
              "EntryWeight" -> TypeSystem`PackageScope`AtomShape[75], 
              "ExitWeight" -> TypeSystem`PackageScope`AtomShape[75]]]], 
           17, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[60011528], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Treatment", "EntryWeight", "ExitWeight"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["CBT", "Cont", "FT"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]], 
            TypeSystem`Atom[
             Quantity[1, "Pounds"]]}], 17], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[60011528]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Treatment\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Treatment\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2127893451][{All, "Treatment"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[All, "Treatment"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"EntryWeight\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"EntryWeight\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2127893451][{All, "EntryWeight"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[All, "EntryWeight"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ExitWeight\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ExitWeight\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2127893451][{All, "ExitWeight"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[All, "ExitWeight"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[1, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"83.8`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[1, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"95.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[1, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[2, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"83.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[2, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"94.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[2, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[3, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[3, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"91.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[3, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[4, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"82.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[4, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"91.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[4, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[5, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[5, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"100.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[5, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[6, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"79.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[6, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"76.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[6, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[7, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"76.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[7, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"76.8`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[7, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[8, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"94.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[8, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"101.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[8, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[9, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"73.4`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[9, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"94.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[9, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[10, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"80.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[10, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"75.2`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[10, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[11, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"81.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[11, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.8`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[11, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[12, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"82.1`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[12, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"95.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[12, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[13, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"77.6`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[13, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"90.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[13, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[14, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"83.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[14, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"92.5`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[14, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[15, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"89.9`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[15, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"93.8`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[15, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[16, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"86", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[16, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"91.7`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[16, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["FT", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[17, 
                   Key["Treatment"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"87.3`", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[17, 
                   Key["EntryWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"98", "\"lb\""}], FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
                  GeneralUtilities`Slice[17, 
                   Key["ExitWeight"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2127893451][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2127893451]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2127893451][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {351., {333., 342.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.708200323932*^9, 3.708213376492*^9},
 CellLabel->
  "Out[214]=",ExpressionUUID->"872f7e14-dff2-46dd-a9bc-8b07a6d9422c"]
}, Closed]],

Cell["Find the number of samples in the Family Therapy Group", "Text",
 CellChangeTimes->{{3.7076888009270115`*^9, 
  3.7076888211605115`*^9}},ExpressionUUID->"e496f695-37a9-4b3f-9a76-\
6505d14550e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "ftreatmentData", "]"}]], "Input",
 CellChangeTimes->{{3.7076886180500116`*^9, 3.7076886254235115`*^9}, {
  3.707688685081012*^9, 3.707688692468012*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"b18b0919-d524-42c9-af1b-6bfa69f1718c"],

Cell[BoxData["17"], "Output",
 CellChangeTimes->{
  3.7076886257810116`*^9, {3.7076886882810116`*^9, 3.7076886931630116`*^9}},
 CellLabel->"Out[55]=",ExpressionUUID->"9a46c2be-4202-4a5f-90a2-b41096747721"]
}, Open  ]],

Cell["Plot Control Data", "Text",
 CellChangeTimes->{{3.7076891812785115`*^9, 
  3.7076891949670115`*^9}},ExpressionUUID->"167394f6-4525-428e-9fcc-\
fb1b660024b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"controlPlot1", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"controlData", "[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<EntryWeight\>\"", ",", "\"\<ExitWeight\>\""}], "}"}]}], 
     "]"}], ",", 
    RowBox[{"PlotLabel", "\[Rule]", "\"\<Control Group\>\""}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Entry Weight\>\"", ",", "\"\<Exit Weight\>\""}], "}"}]}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.707578604330244*^9, 3.707578645288353*^9}, {
   3.7076861058490114`*^9, 3.707686155362012*^9}, 3.7076862299790115`*^9, 
   3.7077300161410055`*^9, {3.707730069267806*^9, 3.7077300717866063`*^9}, {
   3.7077301666064067`*^9, 3.7077301691980066`*^9}, 3.7082002885559998`*^9},
 CellLabel->
  "In[215]:=",ExpressionUUID->"9497b389-565f-4e0a-b169-9eef18684993"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQffYMEOiEOIBpnhCHWTOBIDLMIQ0E2EIcjEHgcxhE
fGaoAwMINARBxCeHQtS1BUPVB0PEhcPg4mD+Zai6Y0FwGmzfGqi4WgjE3IQg
qD1Q89Sg8mnBUHcFQ/TphEHUP4CaHxwCVYewF6Ieau6CQIi6Yqh/goPhNNg8
n1Co/2H+C4Xovwl1L1so3D6wujfBEL5DENTdoXB/g/VJQs3Tgbr/GZp7EmD2
Qt0jDA0PHqi/HMIg4puDHQBtZZnA
      "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Entry Weight\"", TraditionalForm], 
    FormBox["\"Exit Weight\"", TraditionalForm]},
  AxesOrigin->{70.16718750000001, 72.16999999999999},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Control Group\"", TraditionalForm],
  PlotRange->{{70.5, 91.8}, {73., 89.6}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.708200290443*^9, 3.708200331926*^9, 3.708213386731*^9},
 CellLabel->
  "Out[215]=",ExpressionUUID->"28ff6212-5ae8-4054-8dc8-59e6872c66f4"]
}, Closed]],

Cell["Plot Behavioral Cognitive Treatment Data", "Text",
 CellChangeTimes->{{3.7076891997130117`*^9, 
  3.707689226207512*^9}},ExpressionUUID->"ffb61def-4769-4c17-8455-\
9f0e1c7e3d65"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bTreatmentPlot", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"btreatmentData", "[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<EntryWeight\>\"", ",", "\"\<ExitWeight\>\""}], "}"}]}], 
     "]"}], ",", 
    RowBox[{
    "PlotLabel", "\[Rule]", "\"\<Behavioral Cognitive Treatment\>\""}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Entry Weight\>\"", ",", "\"\<Exit Weight\>\""}], "}"}]}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.707578604330244*^9, 3.7075786812733707`*^9}, 
   3.7075918401122026`*^9, {3.707686234289012*^9, 3.7076862454300117`*^9}, {
   3.7077299779606056`*^9, 3.7077299847516055`*^9}, 3.7077300225952063`*^9, {
   3.707730062932206*^9, 3.707730066756206*^9}, {3.707730177871607*^9, 
   3.7077301851158066`*^9}, 3.7082003357349997`*^9},
 CellLabel->
  "In[216]:=",ExpressionUUID->"47ebfa96-c9e4-4f7c-b0a6-311048b8cd09"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxFUKsOwkAQbNB1qAoSMChcFW4VCtPeoz1HSKhF41AofqB8AIofwPEBoFD8
AKoOhaO9maObXCa7Nzuzu5P1Nt8Moigata9DH2Mtj3sbRy2nuo25kcqHEf+/
Yt1p1M/Md8SvAiYKOjML3tuhfi2AdSlpF0PyXQF9Cfq5hHl8/0Hz31C3BC4t
dJ4FULG/Jn+siNTbZ5zDck7N/owY/Lnvjf4V79LwHguLPDbcO/hyvkvvj76c
/P5u3u/D/sT9/bEXdRrF+wU9+k8N+Cn5cQmdV/A38gOA3r7F
      "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Entry Weight\"", TraditionalForm], 
    FormBox["\"Exit Weight\"", TraditionalForm]},
  AxesOrigin->{69.6109375, 69.685},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Behavioral Cognitive Treatment\"", TraditionalForm],
  PlotRange->{{70., 94.9}, {71.3, 103.6}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.708200336672*^9, 3.7082133929849997`*^9},
 CellLabel->
  "Out[216]=",ExpressionUUID->"5c4ef47d-b32f-48a8-87f5-ef5151411884"]
}, Closed]],

Cell["Plot Family Treatment Data", "Text",
 CellChangeTimes->{{3.7076892188800116`*^9, 
  3.7076892398115115`*^9}},ExpressionUUID->"7b92e207-071b-48d1-b947-\
47791da8a12d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fTreatmentPlot", "=", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"ftreatmentData", "[", 
      RowBox[{"All", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<EntryWeight\>\"", ",", "\"\<ExitWeight\>\""}], "}"}]}], 
      "]"}], ",", 
     RowBox[{"PlotLabel", "\[Rule]", "\"\<Family Treatment\>\""}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Entry Weight\>\"", ",", "\"\<Exit Weight\>\""}], 
       "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.7075918514500027`*^9, {3.7076862489810114`*^9, 3.7076862575065117`*^9}, {
   3.7077299894472055`*^9, 3.707730027605006*^9}, {3.707730057892406*^9, 
   3.707730060341606*^9}, {3.707730189629407*^9, 3.707730192468607*^9}},
 CellLabel->
  "In[217]:=",ExpressionUUID->"ff82e82b-bb9b-4143-b209-a8860c1760c4"],

Cell["Combine all plots to make a visual comparison", "Text",
 CellChangeTimes->{{3.7076892490210114`*^9, 3.7076892747080116`*^9}, {
  3.707689334431212*^9, 
  3.707689341925812*^9}},ExpressionUUID->"25c32b43-b7b2-40ec-89b6-\
9abe04c40e85"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsGrid", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{"controlPlot1", ",", "bTreatmentPlot", ",", "fTreatmentPlot"}], 
    "}"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.707686260869012*^9, 3.7076863021350117`*^9}},
 CellLabel->
  "In[218]:=",ExpressionUUID->"e4ed204c-14f8-4fa1-8cdb-b4753c08be17"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         0.012833333333333334`], AbsoluteThickness[1.6], 
         PointBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQffYMEOiEOIBpnhCHWTOBIDLMIQ0E2EIcjEHgcxhE
fGaoAwMINARBxCeHQtS1BUPVB0PEhcPg4mD+Zai6Y0FwGmzfGqi4WgjE3IQg
qD1Q89Sg8mnBUHcFQ/TphEHUP4CaHxwCVYewF6Ieau6CQIi6Yqh/goPhNNg8
n1Co/2H+C4Xovwl1L1so3D6wujfBEL5DENTdoXB/g/VJQs3Tgbr/GZp7EmD2
Qt0jDA0PHqi/HMIg4puDHQBtZZnA
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{
        FormBox["\"Entry Weight\"", TraditionalForm], 
        FormBox["\"Exit Weight\"", TraditionalForm]},
      AxesOrigin->{70.16718750000001, 72.16999999999999},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox["\"Control Group\"", TraditionalForm],
      PlotRange->{{70.5, 91.8}, {73., 89.6}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {193.5, -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360., 222.49223594996212}], InsetBox[
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         0.012833333333333334`], AbsoluteThickness[1.6], 
         PointBox[CompressedData["
1:eJxFUKsOwkAQbNB1qAoSMChcFW4VCtPeoz1HSKhF41AofqB8AIofwPEBoFD8
AKoOhaO9maObXCa7Nzuzu5P1Nt8Moigata9DH2Mtj3sbRy2nuo25kcqHEf+/
Yt1p1M/Md8SvAiYKOjML3tuhfi2AdSlpF0PyXQF9Cfq5hHl8/0Hz31C3BC4t
dJ4FULG/Jn+siNTbZ5zDck7N/owY/Lnvjf4V79LwHguLPDbcO/hyvkvvj76c
/P5u3u/D/sT9/bEXdRrF+wU9+k8N+Cn5cQmdV/A38gOA3r7F
          "]]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{
        FormBox["\"Entry Weight\"", TraditionalForm], 
        FormBox["\"Exit Weight\"", TraditionalForm]},
      AxesOrigin->{69.6109375, 69.685},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox[
       "\"Behavioral Cognitive Treatment\"", TraditionalForm],
      PlotRange->{{70., 94.9}, {71.3, 103.6}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {580.5, -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360., 222.49223594996212}], InsetBox[
     GraphicsBox[{{}, {{}, 
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         0.012833333333333334`], AbsoluteThickness[1.6], 
         PointBox[{{83.8, 95.2}, {83.3, 94.3}, {86., 91.5}, {82.5, 91.9}, {
          86.7, 100.3}, {79.6, 76.7}, {76.9, 76.8}, {94.2, 101.6}, {73.4, 
          94.9}, {80.5, 75.2}, {81.6, 77.8}, {82.1, 95.5}, {77.6, 90.7}, {
          83.5, 92.5}, {89.9, 93.8}, {86., 91.7}, {87.3, 
          98.}}]}, {}}, {}, {}, {{}, {}}, {{}, {}}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{
        FormBox["\"Entry Weight\"", TraditionalForm], 
        FormBox["\"Exit Weight\"", TraditionalForm]},
      AxesOrigin->{73.075, 73.88},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->All,
      Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotLabel->FormBox["\"Family Treatment\"", TraditionalForm],
      PlotRange->{{73.4, 94.2}, {75.2, 101.6}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {967.5, -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360., 222.49223594996212}]}, 
   StyleBox[GeometricTransformationBox[InsetBox[
      StyleBox[
       TagBox[
        RowBox[{"r", "=", 
         RowBox[{"-", "0.161416"}]}],
        "RawBoxes"],
       FontFamily->"Times"], {163.2334167707129, -74.47934918648315}, {
      Left, Baseline},
      Alignment->{Left, Top}], {{{{
       1.0495550243302547`, -0.001558357778707663}, {0.0006599996472138042, 
       2.4781562281909295`}}, {-12.951402309112552`, 130.66983072197408`}}}],
    FontSize->13,
    FontWeight->Bold,
    FontColor->Hue[0.6666666666666666, 1., 1.]], 
   StyleBox[GeometricTransformationBox[InsetBox[
      StyleBox[
       TagBox[
        RowBox[{"r", "=", "0.491969"}],
        "RawBoxes"],
       FontFamily->"Times"], {163.2334167707129, -74.47934918648315}, {
      Left, Baseline},
      Alignment->{Left, Top}], {{{{
       1.0495550243302536`, -0.001558357778707662}, {0.0006599996472138037, 
       2.4781562281909273`}}, {374.16054552915654`, 127.65491114870986`}}}],
    FontSize->13,
    FontWeight->Bold,
    FontColor->Hue[0.6666666666666666, 1., 1.]], 
   StyleBox[GeometricTransformationBox[InsetBox[
      StyleBox[
       TagBox[
        RowBox[{
         RowBox[{"r", "=", "0.538203"}], "\[IndentingNewLine]"}],
        "RawBoxes"],
       FontFamily->"Times"], {163.2334167707129, -74.47934918648315}, {
      Left, Baseline},
      Alignment->{Left, Top}], {{{{
       1.0495550243302536`, -0.001558357778707662}, {0.0006599996472138037, 
       2.4781562281909273`}}, {758.0079157752849, 128.63749610105754`}}}],
    FontSize->13,
    FontWeight->Bold,
    FontColor->Hue[0.6666666666666666, 1., 1.]]},
  ContentSelectable->True,
  ImagePadding->{{138.402116, 139.068783}, {73.965697, 84.509699}},
  ImageSize->{902.6666666666663, Automatic},
  PlotRange->{{187.5, 973.5}, {-135.9025457306665, -111.80842387373012`}},
  PlotRangePadding->Automatic]], "Input",
 CellChangeTimes->{{3.7077302128860073`*^9, 3.7077302356946073`*^9}},
 CellLabel->"Out[32]=",ExpressionUUID->"2ca22e70-a36a-4ab4-8527-c8c14bd5018b"]
}, Open  ]],

Cell[TextData[{
 "By looking at the scatter plot, would you say there is a correlation \
between the entry and exit weight of the young female patients? The data is \
widely scattered, and by visual inspection we can observe there doesn\
\[CloseCurlyQuote]t seem to be a strong correlation between these two \
variables, but to be sure, let\[CloseCurlyQuote]s calculate the value of ",
 StyleBox["\[ScriptR] ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.707412150999592*^9, 3.707412209038814*^9}, {
   3.7074145850519567`*^9, 3.707414586247885*^9}, {3.707415933988881*^9, 
   3.707416013076244*^9}, {3.707416066819787*^9, 3.707416155968058*^9}, {
   3.7075445054725*^9, 3.7075445318050003`*^9}, 
   3.7075451069344997`*^9},ExpressionUUID->"9e2539c8-4901-45b6-befc-\
ba07c25f7bbd"],

Cell["Compute Correlation Coefficient for Control Data", "Text",
 CellChangeTimes->{{3.7076865809705114`*^9, 3.7076865993615117`*^9}, {
  3.7076866374105115`*^9, 
  3.7076866419340115`*^9}},ExpressionUUID->"de442ea1-7181-4c67-a7b2-\
decbd5fd0a5a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Correlation", "[", 
   RowBox[{
    RowBox[{"Normal", "@", 
     RowBox[{"controlData", "[", 
      RowBox[{"All", ",", "\"\<EntryWeight\>\""}], "]"}]}], ",", 
    RowBox[{"Normal", "@", 
     RowBox[{"controlData", "[", 
      RowBox[{"All", ",", "\"\<ExitWeight\>\""}], "]"}]}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.70704317613101*^9, 3.70704317764441*^9}, {
   3.7070456250586243`*^9, 3.7070457743309255`*^9}, {3.707116681494*^9, 
   3.7071167513789997`*^9}, {3.7071189476879997`*^9, 
   3.7071189660629997`*^9}, {3.707119007031*^9, 3.70711914342*^9}, {
   3.7071207340810003`*^9, 3.707120739417*^9}, {3.707120782462*^9, 
   3.707120840844*^9}, {3.7071208748269997`*^9, 3.707120920474*^9}, {
   3.707120983781*^9, 3.707120988959*^9}, {3.707121058929*^9, 
   3.707121098741*^9}, {3.7071262548968143`*^9, 3.7071262972742147`*^9}, {
   3.707126333537915*^9, 3.7071264116572156`*^9}, 3.707212384882106*^9, {
   3.707212443520706*^9, 3.707212467776106*^9}, {3.7075787101334157`*^9, 
   3.707578724662943*^9}, {3.7082121296475*^9, 3.7082121669775*^9}, {
   3.708213432957*^9, 3.708213441756*^9}},
 CellLabel->
  "In[219]:=",ExpressionUUID->"0833d024-a220-4d6f-9ff5-a5aecc369321"],

Cell[BoxData[
 RowBox[{"-", "0.16141614602753193`"}]], "Output",
 CellChangeTimes->{3.7082134424440002`*^9},
 CellLabel->
  "Out[219]=",ExpressionUUID->"9464b613-fcbe-41d7-b4bf-4f527b1aa408"]
}, Open  ]],

Cell["\<\
Compute Correlation Coefficient for Behavioral Cognitive Therapy Data\
\>", "Text",
 CellChangeTimes->{{3.707686647105012*^9, 
  3.707686693192012*^9}},ExpressionUUID->"cd908701-b20d-4115-ba44-\
105086735fec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Correlation", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Normal", "@", 
     RowBox[{"btreatmentData", "[", 
      RowBox[{"All", ",", "\"\<EntryWeight\>\""}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Normal", "@", 
     RowBox[{"btreatmentData", "[", 
      RowBox[{"All", ",", "\"\<ExitWeight\>\""}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.70704317613101*^9, 3.70704317764441*^9}, {
   3.7070456250586243`*^9, 3.7070457743309255`*^9}, {3.707116681494*^9, 
   3.7071167513789997`*^9}, {3.7071189476879997`*^9, 
   3.7071189660629997`*^9}, {3.707119007031*^9, 3.70711914342*^9}, {
   3.7071207340810003`*^9, 3.707120739417*^9}, {3.707120782462*^9, 
   3.707120840844*^9}, {3.7071208748269997`*^9, 3.707120920474*^9}, {
   3.707120983781*^9, 3.707120988959*^9}, {3.707121058929*^9, 
   3.707121098741*^9}, {3.7071262548968143`*^9, 3.7071262972742147`*^9}, {
   3.707126333537915*^9, 3.7071264116572156`*^9}, 3.707212384882106*^9, {
   3.707212443520706*^9, 3.707212467776106*^9}, {3.7075787101334157`*^9, 
   3.7075787516289215`*^9}, {3.707591891737403*^9, 3.707591894689203*^9}},
 CellLabel->
  "In[220]:=",ExpressionUUID->"499296fb-7527-4803-ba99-a1819aad6b8b"],

Cell[BoxData["0.4919693311246251`"], "Output",
 CellChangeTimes->{{3.7075787491293354`*^9, 3.7075787524387164`*^9}, 
   3.7075918968900027`*^9, 3.7077294631430025`*^9, 3.708213446242*^9},
 CellLabel->
  "Out[220]=",ExpressionUUID->"8dadc0ee-552c-4448-bb07-073c70439e97"]
}, Open  ]],

Cell["Compute Correlation Coefficient for Family Therapy Data", "Text",
 CellChangeTimes->{
  3.707686670343012*^9, {3.707686701513012*^9, 
   3.7076867105545115`*^9}},ExpressionUUID->"10d16123-3f28-4dcb-a2b5-\
8df8c29376fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Correlation", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Normal", "@", 
    RowBox[{"ftreatmentData", "[", 
     RowBox[{"All", ",", "\"\<EntryWeight\>\""}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Normal", "@", 
    RowBox[{"ftreatmentData", "[", 
     RowBox[{"All", ",", "\"\<ExitWeight\>\""}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.7075919021747026`*^9, 3.707591903455903*^9}},
 CellLabel->
  "In[221]:=",ExpressionUUID->"3846fea0-b3e5-4fe6-be0c-b2a4aa447c39"],

Cell[BoxData["0.5382029627095148`"], "Output",
 CellChangeTimes->{3.7075919054499025`*^9, 3.7077294655922027`*^9, 
  3.708213448745*^9},
 CellLabel->
  "Out[221]=",ExpressionUUID->"644d3aa6-c9e2-454a-ab1c-5d47e93e6707"]
}, Open  ]],

Cell[TextData[StyleBox["Checking for Linear Correlation", "Subsection"]], \
"Subtitle",
 CellChangeTimes->{{3.707544795902*^9, 
  3.707544817134*^9}},ExpressionUUID->"d1d78134-87b6-41d4-a0f6-f85d76b847f5"],

Cell["\<\
We found the values of the linear correlation coefficient for each of the \
three treatment scenarios in the study, but what do they mean? To interpret \
their meaning, we can use our knowledge on hypothesis tests and p-values. (* \
indicates that there is a weak linear relationship between the entry and exit \
weights, and we can conclude that the weights of the patients are random and \
there is no evidence to support that the anorexia treatments is effective.*)\
\>", "Text",
 CellChangeTimes->{{3.7074162387643385`*^9, 3.707416349500366*^9}, {
  3.7074163829130497`*^9, 3.7074165204528008`*^9}, {3.7074165814952374`*^9, 
  3.7074166554315567`*^9}, {3.7075448331540003`*^9, 3.707544962637*^9}, {
  3.7075451296730003`*^9, 3.707545178349*^9}, {3.707545247193*^9, 
  3.7075452523765*^9}, {3.7075507915645*^9, 3.7075508036765003`*^9}, {
  3.7076899073232155`*^9, 
  3.707689960068616*^9}},ExpressionUUID->"196304f8-33cb-4fd3-804e-\
5c6d7344cb25"],

Cell["\<\
(*In cases where we find a strong linear correlation, we can proceed a \
hypothesis test and find the line  best-fit.*)\
\>", "Text",
 CellChangeTimes->{{3.707416679131352*^9, 3.707416834389906*^9}, {
  3.7075452621730003`*^9, 
  3.707545266025*^9}},ExpressionUUID->"93977ecc-bcd8-4b8f-a3ee-ee1fbbeaf8f2"],

Cell[TextData[{
 "To interpret the ",
 StyleBox["\[ScriptR]",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 "  we refer to the computed p-value, if it is less that or equal to the \
significance level, we conclude there is a linear correlation"
}], "Text",
 CellChangeTimes->{{3.7075476273304996`*^9, 
  3.7075477352955*^9}},ExpressionUUID->"947ca9df-0452-4e54-b867-8f8827d88a67"],

Cell[TextData[StyleBox["Hypothesis Test  using p-value from a t -Test", \
"Subsection"]], "Section",
 CellChangeTimes->{{3.707548219323*^9, 3.70754823856*^9}, {3.707548509962*^9, 
  3.707548536757*^9}, {3.7081960249960003`*^9, 
  3.7081960261289997`*^9}},ExpressionUUID->"7d023089-b374-4c98-ae7f-\
d0e7f4e05af4"],

Cell[TextData[{
 "Using the previous example, we can conduct a formal hypothesis test of the \
claim that there is linear correlation between the entry and exit weights.\n\
To claim that there is linear correlation implies that the linear correlation \
coefficient is not zero.\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["H", "o"], ":", "\[Rho]"}], "=", "0"}], TraditionalForm]],
  ExpressionUUID->"3e762e59-7b86-4f47-b451-b76298762854"],
 "   There is no linear correlation\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", "1"], ":", 
    RowBox[{"\[Rho]", "\[NotEqual]", " ", "0"}]}], TraditionalForm]],
  ExpressionUUID->"3b02632b-eb7e-4264-988c-4cf8cbd8451c"],
 "   There is linear correlation\n\n(*In cases where we find a strong linear \
correlation, we can proceed a hypothesis test and find the line  best-fit.*)\n\
We need to be careful how we interpret the statistical significance of a \
correlation. If we make a determination that our correlation coefficient is \
statistically significant, it does not mean that you have a strong \
association. It simply tests the null hypothesis that there is no \
relationship."
}], "Text",
 CellChangeTimes->{{3.707548274685*^9, 3.7075483824995003`*^9}, {
  3.707548546061*^9, 3.7075485486400003`*^9}, {3.7075485840315*^9, 
  3.7075486134154997`*^9}, {3.7075486441085*^9, 3.707548816674*^9}, {
  3.707548901189*^9, 3.70754890227*^9}, {3.7075508188735*^9, 
  3.7075508204185*^9}, {3.707736270145015*^9, 
  3.707736342940015*^9}},ExpressionUUID->"38a40f64-7932-48cb-b521-\
d0f74e064c02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hypTestControl", "=", 
  RowBox[{"PearsonCorrelationTest", "[", 
   RowBox[{
    RowBox[{"Normal", "@", 
     RowBox[{"controlData", "[", 
      RowBox[{"All", ",", "\"\<EntryWeight\>\""}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Normal", "@", 
     RowBox[{"controlData", "[", 
      RowBox[{"All", ",", "\"\<ExitWeight\>\""}], "]"}]}], ",", 
    "\"\<HypothesisTestData\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7076894746770124`*^9, 3.7076894817952127`*^9}, {
  3.7077294754850025`*^9, 3.707729515963603*^9}},
 CellLabel->
  "In[222]:=",ExpressionUUID->"a4d5db44-edfa-4a17-b311-55864c4f94a8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["HypothesisTestData",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{18., {0., 18.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{{{}, {{}, 
             {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], 
              
              StyleBox[
               PointBox[{{1.8496256320394047`, 0.5363555269502047}, {
                1.412269940032354, -0.0541608797220654}, \
{-1.4916388791733393`, -0.9879739932433417}, {-0.3038870837694014, \
-1.2183576211365177`}, {1.0026673035128535`, 
                1.1805549901150927`}, {-0.4193352560215026, \
-0.08655097272705624}, {0.3516644750755657, 1.6853605437492714`}, {
                0.10053002369890875`, 0.11412020125780614`}}],
               FontFamily->"Arial"]}, {}}, {}}, 
           GraphicsComplexBox[CompressedData["
1:eJyFlD9oU1EUh0MEkYJjESpIuziUUnToUCg+QdKhiIMiOlSJVSNoxArq5KoO
Dv6JLi1C0VJMFB1cqkOfFXVxKfUPKgqCaYIhalIrtkaspsfvCL9HaCAcvsu9
73733nNO28Cx7QfjsVgs9/dfj/Zb9ZB4K1f/xZ1vL/HPELY1Fee9O+u/l85b
jQO4tlj/fXW+ad9zztp+m8VD2b004gfjB+MH4wfjB+MH4yf3ohzxgDXiB+MH
4wfjB+MH4yfvpBy5F/WANeIH4wfjB+MH4yd5oxx5J70X9YA14gfjB+MH4yd5
rBzJG30nvRf1gDXiB+MH4yd1pRzJY80bfSe9F/WANeIH4yd1rhypK81jzRt9
J70X9YA14id9RzlS51pXmseaN/pOei/qAWvEr1Ff1D6kda91pnmteaTvpvek
XhrZb/LS/rXZkVp4491Q7c181ev28PFM7+vxmUgfZB7rtO/MdrzvuNMz61Hr
/lM+/vli5/++UMxe+fXs1Tevs5WX4/2Jqe9huT/Wd639vufVwPMNqdSXYqD9
D89G39U+09aXL+3qLnnUOj+Uqw5vai87v11sbtly7oPXWdo8wqTN8zyftnnO
K+wcgfY/zsU5l9tX6zq9Z2l92Gr+XldFO79zwc4faH/jHvFqdA7Oqf2FffHQ
Ot5o7xHM2fu79yPLl0D7F/e03DlYx3fZJ9I3LD89ar/BY3IovW2wVAmPJNYs
tFyteWS89UxTJjg77zGZfzqTuVv1eOrJxPWu5o9hanXT6UTXXDh2tPPx8I+p
cKKS7O3JLPg4816cDH8X1hc9DnandozdGw3L4+cfXBgp+Dq+wzjzSsbBbuPg
3/xg1Ob7OPOmbR+PB8wnOGE+vo7vMM68dXZuj/vs3B7Tdl/co0fG/wA+9z+x

            "], {{{}, {}, {}, {}}, {{}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{156, 117, 159, 127, 134, 162, 136, 163, 129, 160, 122,
                 119, 157, 116, 156}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{152, 107, 155, 115, 124, 126, 133, 137, 143, 166, 144,
                 168, 139, 164, 131, 128, 121, 118, 111, 109, 153, 106, 
                152}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{149, 102, 151, 104, 150, 105, 113, 114, 158, 125, 132,
                 135, 141, 165, 142, 145, 148, 170, 147, 167, 146, 169, 140, 
                138, 130, 161, 123, 120, 112, 110, 154, 108, 103, 101, 
                149}]}, {}, {}}}]},
          AspectRatio->1,
          Axes->False,
          AxesLabel->{None, None},
          AxesOrigin->{0., 0.},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->True,
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0.5, 0.5}, {0.5, 0.5}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["PearsonCorrelationTest",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"p-Value: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["0.43083038127191886`",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{{{}, {{}, 
             {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], 
              
              StyleBox[
               PointBox[{{1.8496256320394047`, 0.5363555269502047}, {
                1.412269940032354, -0.0541608797220654}, \
{-1.4916388791733393`, -0.9879739932433417}, {-0.3038870837694014, \
-1.2183576211365177`}, {1.0026673035128535`, 
                1.1805549901150927`}, {-0.4193352560215026, \
-0.08655097272705624}, {0.3516644750755657, 1.6853605437492714`}, {
                0.10053002369890875`, 0.11412020125780614`}}],
               FontFamily->"Arial"]}, {}}, {}}, 
           GraphicsComplexBox[CompressedData["
1:eJyFlD9oU1EUh0MEkYJjESpIuziUUnToUCg+QdKhiIMiOlSJVSNoxArq5KoO
Dv6JLi1C0VJMFB1cqkOfFXVxKfUPKgqCaYIhalIrtkaspsfvCL9HaCAcvsu9
73733nNO28Cx7QfjsVgs9/dfj/Zb9ZB4K1f/xZ1vL/HPELY1Fee9O+u/l85b
jQO4tlj/fXW+ad9zztp+m8VD2b004gfjB+MH4wfjB+MH4yf3ohzxgDXiB+MH
4wfjB+MH4yfvpBy5F/WANeIH4wfjB+MH4yd5oxx5J70X9YA14gfjB+MH4yd5
rBzJG30nvRf1gDXiB+MH4yd1pRzJY80bfSe9F/WANeIH4yd1rhypK81jzRt9
J70X9YA14id9RzlS51pXmseaN/pOei/qAWvEr1Ff1D6kda91pnmteaTvpvek
XhrZb/LS/rXZkVp4491Q7c181ev28PFM7+vxmUgfZB7rtO/MdrzvuNMz61Hr
/lM+/vli5/++UMxe+fXs1Tevs5WX4/2Jqe9huT/Wd639vufVwPMNqdSXYqD9
D89G39U+09aXL+3qLnnUOj+Uqw5vai87v11sbtly7oPXWdo8wqTN8zyftnnO
K+wcgfY/zsU5l9tX6zq9Z2l92Gr+XldFO79zwc4faH/jHvFqdA7Oqf2FffHQ
Ot5o7xHM2fu79yPLl0D7F/e03DlYx3fZJ9I3LD89ar/BY3IovW2wVAmPJNYs
tFyteWS89UxTJjg77zGZfzqTuVv1eOrJxPWu5o9hanXT6UTXXDh2tPPx8I+p
cKKS7O3JLPg4816cDH8X1hc9DnandozdGw3L4+cfXBgp+Dq+wzjzSsbBbuPg
3/xg1Ob7OPOmbR+PB8wnOGE+vo7vMM68dXZuj/vs3B7Tdl/co0fG/wA+9z+x

            "], {{{}, {}, {}, {}}, {{}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{156, 117, 159, 127, 134, 162, 136, 163, 129, 160, 122,
                 119, 157, 116, 156}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{152, 107, 155, 115, 124, 126, 133, 137, 143, 166, 144,
                 168, 139, 164, 131, 128, 121, 118, 111, 109, 153, 106, 
                152}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{149, 102, 151, 104, 150, 105, 113, 114, 158, 125, 132,
                 135, 141, 165, 142, 145, 148, 170, 147, 167, 146, 169, 140, 
                138, 130, 161, 123, 120, 112, 110, 154, 108, 103, 101, 
                149}]}, {}, {}}}]},
          AspectRatio->1,
          Axes->False,
          AxesLabel->{None, None},
          AxesOrigin->{0., 0.},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->True,
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0.5, 0.5}, {0.5, 0.5}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["PearsonCorrelationTest",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"p-Value: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["0.43083038127191886`",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Test: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"N/A\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Test statistic: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              RowBox[{"-", "0.161416146027532`"}],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Data: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Univariate\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Conclusion: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              InterpretationBox[Cell["\<\
The null hypothesis that the populations are independent is not rejected at \
the 5 percent level based on the Pearson Correlation test.\
\>",
                CellSize->{300, Automatic},ExpressionUUID->
                "3ac5b788-b9d1-4943-8cd9-414b1568782f"],
               TextCell[
               "The null hypothesis that the populations are independent is \
not rejected at the 5 percent level based on the Pearson Correlation test.", 
                CellSize -> {300, Automatic}]],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  HypothesisTestData[PearsonCorrelationTest, {CompressedData["
1:eJxTTMoPSmViYGAAYSkgPnsGCHRCHGbNBILIMAdjEPgc5sAAAg1BDmkg0BYM
EReGyl8OhYgfg8qrQfXPDIbw04IdIOZC1QeHwM0Bm7sgECoOVecTCrUPai5b
KET8DVR9QijEfEmo/DOYOMxdQRC+QxhEHw/UPjaYu0Ih6ibDzA+GuwfmD7C+
NVB3JMD8BbU3EmrfA5j/wqDiIRBzi0NQ/cMD1XczCK4P4r4geDhCwicUbg4k
HKA0DzTcNgc7AACsI5nA
    "], "SampleToSample", 1, 
    Rational[1, 20], {"Unequal", Automatic, {}}, Automatic, {
    "Pounds", "Pounds"}}, {
   "Normality" -> 1, "EqualVariance" -> 0, "Symmetry" -> 0}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.707689482615213*^9, 3.707729519692003*^9, 
  3.7082003905039997`*^9, 3.708213455401*^9},
 CellLabel->
  "Out[222]=",ExpressionUUID->"248414fe-0b72-4bb7-b2f1-5946b50878b6"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.708213466807*^9, 
  3.7082134707060003`*^9}},ExpressionUUID->"1deb9a0f-c7c6-4749-9330-\
26c3ca210aea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hypTestControl", "[", "\"\<TestDataTable\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7076894917094126`*^9, 3.707689493867113*^9}, {
  3.7082136747609997`*^9, 3.708213705102*^9}},
 CellLabel->
  "In[225]:=",ExpressionUUID->"598a851f-7110-4e44-a4e0-2a4968af19cf"],

Cell[BoxData[
 TemplateBox[{
  "PearsonCorrelationTest","invprp",
   "\"The argument \
\\!\\(\\*RowBox[{\\\"\\\\\\\"ParameterTable\\\\\\\"\\\"}]\\) is not a valid \
property. Specify \\\"Properties\\\" to obtain a list of valid properties.\"",
   2,225,23,26845388976574218377,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.708213689818*^9},
 CellLabel->
  "During evaluation of \
In[225]:=",ExpressionUUID->"6cd1737c-9730-4d47-a867-384d97fc7174"],

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   RowBox[{
    TagBox["HypothesisTestData",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False}, 
     PanelBox[
      PaneSelectorBox[{False->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquarePlusIconMedium"],
             ImageSizeCache->{18., {0., 18.}}],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = True),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 3.5 CurrentValue["FontCapHeight"]/
              AbsoluteCurrentValue[Magnification]}]], 
          GraphicsBox[{{{}, {{}, 
              {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], 
               
               StyleBox[
                PointBox[{{1.8496256320394047`, 0.5363555269502047}, {
                 1.412269940032354, -0.0541608797220654}, \
{-1.4916388791733393`, -0.9879739932433417}, {-0.3038870837694014, \
-1.2183576211365177`}, {1.0026673035128535`, 
                 1.1805549901150927`}, {-0.4193352560215026, \
-0.08655097272705624}, {0.3516644750755657, 1.6853605437492714`}, {
                 0.10053002369890875`, 0.11412020125780614`}}],
                FontFamily->"Arial"]}, {}}, {}}, 
            GraphicsComplexBox[CompressedData["
1:eJyFlD9oU1EUh0MEkYJjESpIuziUUnToUCg+QdKhiIMiOlSJVSNoxArq5KoO
Dv6JLi1C0VJMFB1cqkOfFXVxKfUPKgqCaYIhalIrtkaspsfvCL9HaCAcvsu9
73733nNO28Cx7QfjsVgs9/dfj/Zb9ZB4K1f/xZ1vL/HPELY1Fee9O+u/l85b
jQO4tlj/fXW+ad9zztp+m8VD2b004gfjB+MH4wfjB+MH4yf3ohzxgDXiB+MH
4wfjB+MH4yfvpBy5F/WANeIH4wfjB+MH4yd5oxx5J70X9YA14gfjB+MH4yd5
rBzJG30nvRf1gDXiB+MH4yd1pRzJY80bfSe9F/WANeIH4yd1rhypK81jzRt9
J70X9YA14id9RzlS51pXmseaN/pOei/qAWvEr1Ff1D6kda91pnmteaTvpvek
XhrZb/LS/rXZkVp4491Q7c181ev28PFM7+vxmUgfZB7rtO/MdrzvuNMz61Hr
/lM+/vli5/++UMxe+fXs1Tevs5WX4/2Jqe9huT/Wd639vufVwPMNqdSXYqD9
D89G39U+09aXL+3qLnnUOj+Uqw5vai87v11sbtly7oPXWdo8wqTN8zyftnnO
K+wcgfY/zsU5l9tX6zq9Z2l92Gr+XldFO79zwc4faH/jHvFqdA7Oqf2FffHQ
Ot5o7xHM2fu79yPLl0D7F/e03DlYx3fZJ9I3LD89ar/BY3IovW2wVAmPJNYs
tFyteWS89UxTJjg77zGZfzqTuVv1eOrJxPWu5o9hanXT6UTXXDh2tPPx8I+p
cKKS7O3JLPg4816cDH8X1hc9DnandozdGw3L4+cfXBgp+Dq+wzjzSsbBbuPg
3/xg1Ob7OPOmbR+PB8wnOGE+vo7vMM68dXZuj/vs3B7Tdl/co0fG/wA+9z+x

             "], {{{}, {}, {}, {}}, {{}, 
               {GrayLevel[0], Opacity[0.5], 
                LineBox[{156, 117, 159, 127, 134, 162, 136, 163, 129, 160, 
                 122, 119, 157, 116, 156}]}, 
               {GrayLevel[0], Opacity[0.5], 
                LineBox[{152, 107, 155, 115, 124, 126, 133, 137, 143, 166, 
                 144, 168, 139, 164, 131, 128, 121, 118, 111, 109, 153, 106, 
                 152}]}, 
               {GrayLevel[0], Opacity[0.5], 
                LineBox[{149, 102, 151, 104, 150, 105, 113, 114, 158, 125, 
                 132, 135, 141, 165, 142, 145, 148, 170, 147, 167, 146, 169, 
                 140, 138, 130, 161, 123, 120, 112, 110, 154, 108, 103, 101, 
                 149}]}, {}, {}}}]},
           AspectRatio->1,
           Axes->False,
           AxesLabel->{None, None},
           AxesOrigin->{0., 0.},
           Background->GrayLevel[0.93],
           BaseStyle->{FontFamily -> "Arial"},
           DisplayFunction->Identity,
           Frame->True,
           FrameLabel->{{None, None}, {None, None}},
           FrameStyle->Directive[
             Thickness[Tiny], 
             GrayLevel[0.7]],
           FrameTicks->None,
           GridLines->{None, None},
           GridLinesStyle->Directive[
             GrayLevel[0.5, 0.4]],
           ImageSize->{Automatic, 
             Dynamic[
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])]},
           LabelStyle->{FontFamily -> "Arial"},
           Method->{"ScalingFunctions" -> None},
           PlotRange->{All, All},
           PlotRangeClipping->True,
           PlotRangePadding->{{0.5, 0.5}, {0.5, 0.5}},
           Ticks->{Automatic, Automatic}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Type: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["PearsonCorrelationTest",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"p-Value: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["0.43083038127191886`",
               "SummaryItem"]}]}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquareMinusIconMedium"]],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = False),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 3.5 CurrentValue["FontCapHeight"]/
              AbsoluteCurrentValue[Magnification]}]], 
          GraphicsBox[{{{}, {{}, 
              {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], 
               
               StyleBox[
                PointBox[{{1.8496256320394047`, 0.5363555269502047}, {
                 1.412269940032354, -0.0541608797220654}, \
{-1.4916388791733393`, -0.9879739932433417}, {-0.3038870837694014, \
-1.2183576211365177`}, {1.0026673035128535`, 
                 1.1805549901150927`}, {-0.4193352560215026, \
-0.08655097272705624}, {0.3516644750755657, 1.6853605437492714`}, {
                 0.10053002369890875`, 0.11412020125780614`}}],
                FontFamily->"Arial"]}, {}}, {}}, 
            GraphicsComplexBox[CompressedData["
1:eJyFlD9oU1EUh0MEkYJjESpIuziUUnToUCg+QdKhiIMiOlSJVSNoxArq5KoO
Dv6JLi1C0VJMFB1cqkOfFXVxKfUPKgqCaYIhalIrtkaspsfvCL9HaCAcvsu9
73733nNO28Cx7QfjsVgs9/dfj/Zb9ZB4K1f/xZ1vL/HPELY1Fee9O+u/l85b
jQO4tlj/fXW+ad9zztp+m8VD2b004gfjB+MH4wfjB+MH4yf3ohzxgDXiB+MH
4wfjB+MH4yfvpBy5F/WANeIH4wfjB+MH4yd5oxx5J70X9YA14gfjB+MH4yd5
rBzJG30nvRf1gDXiB+MH4yd1pRzJY80bfSe9F/WANeIH4yd1rhypK81jzRt9
J70X9YA14id9RzlS51pXmseaN/pOei/qAWvEr1Ff1D6kda91pnmteaTvpvek
XhrZb/LS/rXZkVp4491Q7c181ev28PFM7+vxmUgfZB7rtO/MdrzvuNMz61Hr
/lM+/vli5/++UMxe+fXs1Tevs5WX4/2Jqe9huT/Wd639vufVwPMNqdSXYqD9
D89G39U+09aXL+3qLnnUOj+Uqw5vai87v11sbtly7oPXWdo8wqTN8zyftnnO
K+wcgfY/zsU5l9tX6zq9Z2l92Gr+XldFO79zwc4faH/jHvFqdA7Oqf2FffHQ
Ot5o7xHM2fu79yPLl0D7F/e03DlYx3fZJ9I3LD89ar/BY3IovW2wVAmPJNYs
tFyteWS89UxTJjg77zGZfzqTuVv1eOrJxPWu5o9hanXT6UTXXDh2tPPx8I+p
cKKS7O3JLPg4816cDH8X1hc9DnandozdGw3L4+cfXBgp+Dq+wzjzSsbBbuPg
3/xg1Ob7OPOmbR+PB8wnOGE+vo7vMM68dXZuj/vs3B7Tdl/co0fG/wA+9z+x

             "], {{{}, {}, {}, {}}, {{}, 
               {GrayLevel[0], Opacity[0.5], 
                LineBox[{156, 117, 159, 127, 134, 162, 136, 163, 129, 160, 
                 122, 119, 157, 116, 156}]}, 
               {GrayLevel[0], Opacity[0.5], 
                LineBox[{152, 107, 155, 115, 124, 126, 133, 137, 143, 166, 
                 144, 168, 139, 164, 131, 128, 121, 118, 111, 109, 153, 106, 
                 152}]}, 
               {GrayLevel[0], Opacity[0.5], 
                LineBox[{149, 102, 151, 104, 150, 105, 113, 114, 158, 125, 
                 132, 135, 141, 165, 142, 145, 148, 170, 147, 167, 146, 169, 
                 140, 138, 130, 161, 123, 120, 112, 110, 154, 108, 103, 101, 
                 149}]}, {}, {}}}]},
           AspectRatio->1,
           Axes->False,
           AxesLabel->{None, None},
           AxesOrigin->{0., 0.},
           Background->GrayLevel[0.93],
           BaseStyle->{FontFamily -> "Arial"},
           DisplayFunction->Identity,
           Frame->True,
           FrameLabel->{{None, None}, {None, None}},
           FrameStyle->Directive[
             Thickness[Tiny], 
             GrayLevel[0.7]],
           FrameTicks->None,
           GridLines->{None, None},
           GridLinesStyle->Directive[
             GrayLevel[0.5, 0.4]],
           ImageSize->{Automatic, 
             Dynamic[
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])]},
           LabelStyle->{FontFamily -> "Arial"},
           Method->{"ScalingFunctions" -> None},
           PlotRange->{All, All},
           PlotRangeClipping->True,
           PlotRangePadding->{{0.5, 0.5}, {0.5, 0.5}},
           Ticks->{Automatic, Automatic}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Type: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["PearsonCorrelationTest",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"p-Value: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["0.43083038127191886`",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Test: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["\<\"N/A\"\>",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Test statistic: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               RowBox[{"-", "0.161416146027532`"}],
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Data: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["\<\"Univariate\"\>",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Conclusion: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               InterpretationBox[Cell["\<\
The null hypothesis that the populations are independent is not rejected at \
the 5 percent level based on the Pearson Correlation test.\
\>",
                 CellSize->{300, Automatic},ExpressionUUID->
                 "cf2b6f19-111b-4b59-a93b-90b4127cd06f"],
                TextCell[
                "The null hypothesis that the populations are independent is \
not rejected at the 5 percent level based on the Pearson Correlation test.", 
                 CellSize -> {300, Automatic}]],
               "SummaryItem"]}]}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
       Typeset`open$$],
       ImageSize->Automatic],
      BaselinePosition->Baseline],
     DynamicModuleValues:>{}], "]"}],
   HypothesisTestData[PearsonCorrelationTest, {CompressedData["
1:eJxTTMoPSmViYGAAYSkgPnsGCHRCHGbNBILIMAdjEPgc5sAAAg1BDmkg0BYM
EReGyl8OhYgfg8qrQfXPDIbw04IdIOZC1QeHwM0Bm7sgECoOVecTCrUPai5b
KET8DVR9QijEfEmo/DOYOMxdQRC+QxhEHw/UPjaYu0Ih6ibDzA+GuwfmD7C+
NVB3JMD8BbU3EmrfA5j/wqDiIRBzi0NQ/cMD1XczCK4P4r4geDhCwicUbg4k
HKA0DzTcNgc7AACsI5nA
     "], "SampleToSample", 1, 
     Rational[1, 20], {"Unequal", Automatic, {}}, Automatic, {
     "Pounds", "Pounds"}}, {
    "Normality" -> 1, "EqualVariance" -> 0, "Symmetry" -> 0}],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "[", "\<\"ParameterTable\"\>", "]"}]], "Output",
 CellChangeTimes->{3.7076894941947126`*^9, 3.7077295241556025`*^9, 
  3.708200392926*^9, 3.70821345834*^9, 3.708213689844*^9},
 CellLabel->
  "Out[225]=",ExpressionUUID->"2778bd0d-3462-442b-ad6c-a17fb07b316b"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {"\<\"\"\>", "\<\"Statistic\"\>", "\<\"P\[Hyphen]Value\"\>"},
     {"\<\"Pearson Correlation\"\>", 
      RowBox[{"-", "0.161416146027532`"}], "0.43083038127191886`"}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
    GridBoxDividers->{
     "ColumnsIndexed" -> {2 -> GrayLevel[0.7]}, 
      "RowsIndexed" -> {2 -> GrayLevel[0.7]}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"], "DialogStyle",
  StripOnInput->False]], "Output",
 CellChangeTimes->{3.7076894941947126`*^9, 3.7077295241556025`*^9, 
  3.708200392926*^9, 3.70821345834*^9, 3.708213689844*^9},
 CellLabel->
  "Out[226]=",ExpressionUUID->"e7eef8a7-e3ba-42ef-946c-15b76f25c82a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hypTestControl", "[", "\"\<TestConclusion\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.707689544576313*^9, 3.7076895587819133`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"2a8b27f5-6eab-45a2-9318-342435c3132f"],

Cell[BoxData[
 TemplateBox[{
  "\"The null hypothesis that \"",
   TemplateBox[{"\"the populations are independent \""}, "RowDefault"],
   "\"is rejected at the \"",
   TemplateBox[{"5", "\" percent level \""}, "RowDefault"],
   TemplateBox[{"\"based on the \"", "\"Pearson Correlation\"", "\" test.\""},
     "RowDefault"]},
  "RowDefault"]], "Output",
 CellChangeTimes->{3.7076895599692135`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"8f722bdf-ddd3-4acc-8abf-3746aa4af534"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hypTestBTreatment", "=", 
  RowBox[{"PearsonCorrelationTest", "[", 
   RowBox[{
    RowBox[{"Normal", "@", 
     RowBox[{"btreatmentData", "[", 
      RowBox[{"All", ",", "\"\<EntryWeight\>\""}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Normal", "@", 
     RowBox[{"btreatmentData", "[", 
      RowBox[{"All", ",", "\"\<ExitWeight\>\""}], "]"}]}], ",", 
    "\"\<HypothesisTestData\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7076895846798134`*^9, 3.7076895975838137`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"95eb41a3-533f-48a9-94a7-f66e09be26f4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["HypothesisTestData",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{18., {0., 18.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{{{}, {{}, 
             {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], 
              
              StyleBox[
               PointBox[{{1.8496256320394047`, 0.5363555269502047}, {
                1.412269940032354, -0.0541608797220654}, \
{-1.4916388791733393`, -0.9879739932433417}, {-0.3038870837694014, \
-1.2183576211365177`}, {1.0026673035128535`, 
                1.1805549901150927`}, {-0.4193352560215026, \
-0.08655097272705624}, {0.3516644750755657, 1.6853605437492714`}, {
                0.10053002369890875`, 0.11412020125780614`}}],
               FontFamily->"Arial"]}, {}}, {}}, 
           GraphicsComplexBox[CompressedData["
1:eJyFlD9oU1EUh0MEkYJjESpIuziUUnToUCg+QdKhiIMiOlSJVSNoxArq5KoO
Dv6JLi1C0VJMFB1cqkOfFXVxKfUPKgqCaYIhalIrtkaspsfvCL9HaCAcvsu9
73733nNO28Cx7QfjsVgs9/dfj/Zb9ZB4K1f/xZ1vL/HPELY1Fee9O+u/l85b
jQO4tlj/fXW+ad9zztp+m8VD2b004gfjB+MH4wfjB+MH4yf3ohzxgDXiB+MH
4wfjB+MH4yfvpBy5F/WANeIH4wfjB+MH4yd5oxx5J70X9YA14gfjB+MH4yd5
rBzJG30nvRf1gDXiB+MH4yd1pRzJY80bfSe9F/WANeIH4yd1rhypK81jzRt9
J70X9YA14id9RzlS51pXmseaN/pOei/qAWvEr1Ff1D6kda91pnmteaTvpvek
XhrZb/LS/rXZkVp4491Q7c181ev28PFM7+vxmUgfZB7rtO/MdrzvuNMz61Hr
/lM+/vli5/++UMxe+fXs1Tevs5WX4/2Jqe9huT/Wd639vufVwPMNqdSXYqD9
D89G39U+09aXL+3qLnnUOj+Uqw5vai87v11sbtly7oPXWdo8wqTN8zyftnnO
K+wcgfY/zsU5l9tX6zq9Z2l92Gr+XldFO79zwc4faH/jHvFqdA7Oqf2FffHQ
Ot5o7xHM2fu79yPLl0D7F/e03DlYx3fZJ9I3LD89ar/BY3IovW2wVAmPJNYs
tFyteWS89UxTJjg77zGZfzqTuVv1eOrJxPWu5o9hanXT6UTXXDh2tPPx8I+p
cKKS7O3JLPg4816cDH8X1hc9DnandozdGw3L4+cfXBgp+Dq+wzjzSsbBbuPg
3/xg1Ob7OPOmbR+PB8wnOGE+vo7vMM68dXZuj/vs3B7Tdl/co0fG/wA+9z+x

            "], {{{}, {}, {}, {}}, {{}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{156, 117, 159, 127, 134, 162, 136, 163, 129, 160, 122,
                 119, 157, 116, 156}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{152, 107, 155, 115, 124, 126, 133, 137, 143, 166, 144,
                 168, 139, 164, 131, 128, 121, 118, 111, 109, 153, 106, 
                152}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{149, 102, 151, 104, 150, 105, 113, 114, 158, 125, 132,
                 135, 141, 165, 142, 145, 148, 170, 147, 167, 146, 169, 140, 
                138, 130, 161, 123, 120, 112, 110, 154, 108, 103, 101, 
                149}]}, {}, {}}}]},
          AspectRatio->1,
          Axes->False,
          AxesLabel->{None, None},
          AxesOrigin->{0., 0.},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->True,
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0.5, 0.5}, {0.5, 0.5}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["PearsonCorrelationTest",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"p-Value: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["0.006713413399105878`",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{{{}, {{}, 
             {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], 
              
              StyleBox[
               PointBox[{{1.8496256320394047`, 0.5363555269502047}, {
                1.412269940032354, -0.0541608797220654}, \
{-1.4916388791733393`, -0.9879739932433417}, {-0.3038870837694014, \
-1.2183576211365177`}, {1.0026673035128535`, 
                1.1805549901150927`}, {-0.4193352560215026, \
-0.08655097272705624}, {0.3516644750755657, 1.6853605437492714`}, {
                0.10053002369890875`, 0.11412020125780614`}}],
               FontFamily->"Arial"]}, {}}, {}}, 
           GraphicsComplexBox[CompressedData["
1:eJyFlD9oU1EUh0MEkYJjESpIuziUUnToUCg+QdKhiIMiOlSJVSNoxArq5KoO
Dv6JLi1C0VJMFB1cqkOfFXVxKfUPKgqCaYIhalIrtkaspsfvCL9HaCAcvsu9
73733nNO28Cx7QfjsVgs9/dfj/Zb9ZB4K1f/xZ1vL/HPELY1Fee9O+u/l85b
jQO4tlj/fXW+ad9zztp+m8VD2b004gfjB+MH4wfjB+MH4yf3ohzxgDXiB+MH
4wfjB+MH4yfvpBy5F/WANeIH4wfjB+MH4yd5oxx5J70X9YA14gfjB+MH4yd5
rBzJG30nvRf1gDXiB+MH4yd1pRzJY80bfSe9F/WANeIH4yd1rhypK81jzRt9
J70X9YA14id9RzlS51pXmseaN/pOei/qAWvEr1Ff1D6kda91pnmteaTvpvek
XhrZb/LS/rXZkVp4491Q7c181ev28PFM7+vxmUgfZB7rtO/MdrzvuNMz61Hr
/lM+/vli5/++UMxe+fXs1Tevs5WX4/2Jqe9huT/Wd639vufVwPMNqdSXYqD9
D89G39U+09aXL+3qLnnUOj+Uqw5vai87v11sbtly7oPXWdo8wqTN8zyftnnO
K+wcgfY/zsU5l9tX6zq9Z2l92Gr+XldFO79zwc4faH/jHvFqdA7Oqf2FffHQ
Ot5o7xHM2fu79yPLl0D7F/e03DlYx3fZJ9I3LD89ar/BY3IovW2wVAmPJNYs
tFyteWS89UxTJjg77zGZfzqTuVv1eOrJxPWu5o9hanXT6UTXXDh2tPPx8I+p
cKKS7O3JLPg4816cDH8X1hc9DnandozdGw3L4+cfXBgp+Dq+wzjzSsbBbuPg
3/xg1Ob7OPOmbR+PB8wnOGE+vo7vMM68dXZuj/vs3B7Tdl/co0fG/wA+9z+x

            "], {{{}, {}, {}, {}}, {{}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{156, 117, 159, 127, 134, 162, 136, 163, 129, 160, 122,
                 119, 157, 116, 156}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{152, 107, 155, 115, 124, 126, 133, 137, 143, 166, 144,
                 168, 139, 164, 131, 128, 121, 118, 111, 109, 153, 106, 
                152}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{149, 102, 151, 104, 150, 105, 113, 114, 158, 125, 132,
                 135, 141, 165, 142, 145, 148, 170, 147, 167, 146, 169, 140, 
                138, 130, 161, 123, 120, 112, 110, 154, 108, 103, 101, 
                149}]}, {}, {}}}]},
          AspectRatio->1,
          Axes->False,
          AxesLabel->{None, None},
          AxesOrigin->{0., 0.},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->True,
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0.5, 0.5}, {0.5, 0.5}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["PearsonCorrelationTest",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"p-Value: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["0.006713413399105878`",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Test: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"N/A\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Test statistic: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["0.4919693311246251`",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Data: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Univariate\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Conclusion: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              InterpretationBox[Cell["\<\
The null hypothesis that the populations are independent is rejected at the 5 \
percent level based on the Pearson Correlation test.\
\>",
                CellSize->{300, Automatic},ExpressionUUID->
                "774ed4e7-0bfb-4bb0-a7cf-34756e230524"],
               TextCell[
               "The null hypothesis that the populations are independent is \
rejected at the 5 percent level based on the Pearson Correlation test.", 
                CellSize -> {300, Automatic}]],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  HypothesisTestData[PearsonCorrelationTest, {CompressedData["
1:eJxVkCsOwkAQhhs0DlVBUgyqrgq3CoVhH304QgIWjUOhuEA5AIoL4DgAqCou
UIVD1dEy3zZhks1m5n/MY7Le6c0gCILujQMisupctjFz6pevrNp2caHeGPV8
tBGnkt8ylXQxMsJXVnkfyZ3wF6nwjMfhH5biE1rBK/C7Fd0b/dAJr3S9Xuro
Pq7Xiw7/iHrC/C/8Tuy1xbcA3/OHRvC6oG8OL+PXgh/pF+f0By/9npo7sX/F
voWjP3PMuWeD39Xvof/vHxbcE32NfurvlKN36guphb7F
    "], "SampleToSample", 1, 
    Rational[1, 20], {"Unequal", Automatic, {}}, Automatic, {
    "Pounds", "Pounds"}}, {
   "Normality" -> 1, "EqualVariance" -> 0, "Symmetry" -> 0}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7076895984707136`*^9, 3.707729534156803*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"09b77f8e-31ff-410f-978d-a7ae27de5345"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hypTestBTreatment", "[", "\"\<TestDataTable\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.707689639355114*^9, 3.707689668014114*^9}},
 CellLabel->
  "In[208]:=",ExpressionUUID->"e72e9931-65a4-4f8d-a4b9-b0d6fa1b7821"],

Cell[BoxData[
 RowBox[{"hypTestBTreatment", "[", "\<\"TestDataTable\"\>", "]"}]], "Output",
 CellChangeTimes->{3.7076896692472143`*^9, 3.7077295402906027`*^9, 
  3.708213305547*^9},
 CellLabel->
  "Out[208]=",ExpressionUUID->"786c005b-bca1-4740-8d95-c2f83fc6b2c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hypTestBTreatment", "[", "\"\<TestConclusion\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.707689612304414*^9, 3.7076896236800137`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"52c42f79-9f03-48bd-9fef-24bbc21c6ee0"],

Cell[BoxData[
 TemplateBox[{
  "\"The null hypothesis that \"",
   TemplateBox[{"\"the populations are independent \""}, "RowDefault"],
   "\"is rejected at the \"",
   TemplateBox[{"5", "\" percent level \""}, "RowDefault"],
   TemplateBox[{"\"based on the \"", "\"Pearson Correlation\"", "\" test.\""},
     "RowDefault"]},
  "RowDefault"]], "Output",
 CellChangeTimes->{3.7076896240700135`*^9, 3.7077295635348034`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"6424ea3b-7635-49af-9dc3-41649c26b236"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hypTestFTreatment", "=", 
  RowBox[{"PearsonCorrelationTest", "[", 
   RowBox[{
    RowBox[{"Normal", "@", 
     RowBox[{"ftreatmentData", "[", 
      RowBox[{"All", ",", "\"\<EntryWeight\>\""}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Normal", "@", 
     RowBox[{"ftreatmentData", "[", 
      RowBox[{"All", ",", "\"\<ExitWeight\>\""}], "]"}]}], ",", 
    "\"\<HypothesisTestData\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{3.707689690626514*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"1a9499a1-1f2b-4d23-ad7a-595e6e60770f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["HypothesisTestData",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{18., {0., 18.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{{{}, {{}, 
             {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], 
              
              StyleBox[
               PointBox[{{1.8496256320394047`, 0.5363555269502047}, {
                1.412269940032354, -0.0541608797220654}, \
{-1.4916388791733393`, -0.9879739932433417}, {-0.3038870837694014, \
-1.2183576211365177`}, {1.0026673035128535`, 
                1.1805549901150927`}, {-0.4193352560215026, \
-0.08655097272705624}, {0.3516644750755657, 1.6853605437492714`}, {
                0.10053002369890875`, 0.11412020125780614`}}],
               FontFamily->"Arial"]}, {}}, {}}, 
           GraphicsComplexBox[CompressedData["
1:eJyFlD9oU1EUh0MEkYJjESpIuziUUnToUCg+QdKhiIMiOlSJVSNoxArq5KoO
Dv6JLi1C0VJMFB1cqkOfFXVxKfUPKgqCaYIhalIrtkaspsfvCL9HaCAcvsu9
73733nNO28Cx7QfjsVgs9/dfj/Zb9ZB4K1f/xZ1vL/HPELY1Fee9O+u/l85b
jQO4tlj/fXW+ad9zztp+m8VD2b004gfjB+MH4wfjB+MH4yf3ohzxgDXiB+MH
4wfjB+MH4yfvpBy5F/WANeIH4wfjB+MH4yd5oxx5J70X9YA14gfjB+MH4yd5
rBzJG30nvRf1gDXiB+MH4yd1pRzJY80bfSe9F/WANeIH4yd1rhypK81jzRt9
J70X9YA14id9RzlS51pXmseaN/pOei/qAWvEr1Ff1D6kda91pnmteaTvpvek
XhrZb/LS/rXZkVp4491Q7c181ev28PFM7+vxmUgfZB7rtO/MdrzvuNMz61Hr
/lM+/vli5/++UMxe+fXs1Tevs5WX4/2Jqe9huT/Wd639vufVwPMNqdSXYqD9
D89G39U+09aXL+3qLnnUOj+Uqw5vai87v11sbtly7oPXWdo8wqTN8zyftnnO
K+wcgfY/zsU5l9tX6zq9Z2l92Gr+XldFO79zwc4faH/jHvFqdA7Oqf2FffHQ
Ot5o7xHM2fu79yPLl0D7F/e03DlYx3fZJ9I3LD89ar/BY3IovW2wVAmPJNYs
tFyteWS89UxTJjg77zGZfzqTuVv1eOrJxPWu5o9hanXT6UTXXDh2tPPx8I+p
cKKS7O3JLPg4816cDH8X1hc9DnandozdGw3L4+cfXBgp+Dq+wzjzSsbBbuPg
3/xg1Ob7OPOmbR+PB8wnOGE+vo7vMM68dXZuj/vs3B7Tdl/co0fG/wA+9z+x

            "], {{{}, {}, {}, {}}, {{}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{156, 117, 159, 127, 134, 162, 136, 163, 129, 160, 122,
                 119, 157, 116, 156}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{152, 107, 155, 115, 124, 126, 133, 137, 143, 166, 144,
                 168, 139, 164, 131, 128, 121, 118, 111, 109, 153, 106, 
                152}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{149, 102, 151, 104, 150, 105, 113, 114, 158, 125, 132,
                 135, 141, 165, 142, 145, 148, 170, 147, 167, 146, 169, 140, 
                138, 130, 161, 123, 120, 112, 110, 154, 108, 103, 101, 
                149}]}, {}, {}}}]},
          AspectRatio->1,
          Axes->False,
          AxesLabel->{None, None},
          AxesOrigin->{0., 0.},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->True,
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0.5, 0.5}, {0.5, 0.5}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["PearsonCorrelationTest",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"p-Value: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["0.025835267767727033`",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{{{}, {{}, 
             {GrayLevel[0.5], PointSize[0.125], AbsoluteThickness[1.5], 
              
              StyleBox[
               PointBox[{{1.8496256320394047`, 0.5363555269502047}, {
                1.412269940032354, -0.0541608797220654}, \
{-1.4916388791733393`, -0.9879739932433417}, {-0.3038870837694014, \
-1.2183576211365177`}, {1.0026673035128535`, 
                1.1805549901150927`}, {-0.4193352560215026, \
-0.08655097272705624}, {0.3516644750755657, 1.6853605437492714`}, {
                0.10053002369890875`, 0.11412020125780614`}}],
               FontFamily->"Arial"]}, {}}, {}}, 
           GraphicsComplexBox[CompressedData["
1:eJyFlD9oU1EUh0MEkYJjESpIuziUUnToUCg+QdKhiIMiOlSJVSNoxArq5KoO
Dv6JLi1C0VJMFB1cqkOfFXVxKfUPKgqCaYIhalIrtkaspsfvCL9HaCAcvsu9
73733nNO28Cx7QfjsVgs9/dfj/Zb9ZB4K1f/xZ1vL/HPELY1Fee9O+u/l85b
jQO4tlj/fXW+ad9zztp+m8VD2b004gfjB+MH4wfjB+MH4yf3ohzxgDXiB+MH
4wfjB+MH4yfvpBy5F/WANeIH4wfjB+MH4yd5oxx5J70X9YA14gfjB+MH4yd5
rBzJG30nvRf1gDXiB+MH4yd1pRzJY80bfSe9F/WANeIH4yd1rhypK81jzRt9
J70X9YA14id9RzlS51pXmseaN/pOei/qAWvEr1Ff1D6kda91pnmteaTvpvek
XhrZb/LS/rXZkVp4491Q7c181ev28PFM7+vxmUgfZB7rtO/MdrzvuNMz61Hr
/lM+/vli5/++UMxe+fXs1Tevs5WX4/2Jqe9huT/Wd639vufVwPMNqdSXYqD9
D89G39U+09aXL+3qLnnUOj+Uqw5vai87v11sbtly7oPXWdo8wqTN8zyftnnO
K+wcgfY/zsU5l9tX6zq9Z2l92Gr+XldFO79zwc4faH/jHvFqdA7Oqf2FffHQ
Ot5o7xHM2fu79yPLl0D7F/e03DlYx3fZJ9I3LD89ar/BY3IovW2wVAmPJNYs
tFyteWS89UxTJjg77zGZfzqTuVv1eOrJxPWu5o9hanXT6UTXXDh2tPPx8I+p
cKKS7O3JLPg4816cDH8X1hc9DnandozdGw3L4+cfXBgp+Dq+wzjzSsbBbuPg
3/xg1Ob7OPOmbR+PB8wnOGE+vo7vMM68dXZuj/vs3B7Tdl/co0fG/wA+9z+x

            "], {{{}, {}, {}, {}}, {{}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{156, 117, 159, 127, 134, 162, 136, 163, 129, 160, 122,
                 119, 157, 116, 156}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{152, 107, 155, 115, 124, 126, 133, 137, 143, 166, 144,
                 168, 139, 164, 131, 128, 121, 118, 111, 109, 153, 106, 
                152}]}, 
              {GrayLevel[0], Opacity[0.5], 
               LineBox[{149, 102, 151, 104, 150, 105, 113, 114, 158, 125, 132,
                 135, 141, 165, 142, 145, 148, 170, 147, 167, 146, 169, 140, 
                138, 130, 161, 123, 120, 112, 110, 154, 108, 103, 101, 
                149}]}, {}, {}}}]},
          AspectRatio->1,
          Axes->False,
          AxesLabel->{None, None},
          AxesOrigin->{0., 0.},
          Background->GrayLevel[0.93],
          BaseStyle->{FontFamily -> "Arial"},
          DisplayFunction->Identity,
          Frame->True,
          FrameLabel->{{None, None}, {None, None}},
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          LabelStyle->{FontFamily -> "Arial"},
          Method->{"ScalingFunctions" -> None},
          PlotRange->{All, All},
          PlotRangeClipping->True,
          PlotRangePadding->{{0.5, 0.5}, {0.5, 0.5}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Type: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["PearsonCorrelationTest",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"p-Value: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["0.025835267767727033`",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Test: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"N/A\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Test statistic: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["0.5382029627095147`",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Data: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Univariate\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Conclusion: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              InterpretationBox[Cell["\<\
The null hypothesis that the populations are independent is rejected at the 5 \
percent level based on the Pearson Correlation test.\
\>",
                CellSize->{300, Automatic},ExpressionUUID->
                "c41d6682-f1ab-41e1-a64d-bdd2c2c3d55c"],
               TextCell[
               "The null hypothesis that the populations are independent is \
rejected at the 5 percent level based on the Pearson Correlation test.", 
                CellSize -> {300, Automatic}]],
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  HypothesisTestData[
  PearsonCorrelationTest, {{{83.8, 83.3, 86., 82.5, 86.7, 79.6, 76.9, 94.2, 
    73.4, 80.5, 81.6, 82.1, 77.6, 83.5, 89.9, 86., 87.3}, {95.2, 94.3, 91.5, 
    91.9, 100.3, 76.7, 76.8, 101.6, 94.9, 75.2, 77.8, 95.5, 90.7, 92.5, 93.8, 
    91.7, 98.}}, "SampleToSample", 1, 
    Rational[1, 20], {"Unequal", Automatic, {}}, Automatic, {
    "Pounds", "Pounds"}}, {
   "Normality" -> 1, "EqualVariance" -> 0, "Symmetry" -> 0}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.707689692209614*^9, 3.707729614412204*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"a7a9d6d8-e152-4bbb-928c-0bf85af14956"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"hypTestFTreatment", "[", "\"\<TestDataTable\>\"", "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7076897053793144`*^9, 3.7076897244158144`*^9}, 
   3.7077296213958035`*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"8e5bd5a5-d4f2-4f6f-8727-6a9bf0c6a981"],

Cell[BoxData[
 TemplateBox[{
  "PearsonCorrelationTest","nortst",
   "\"At least one of the p-values in \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{\\\"0.22710212201990054`\\\", \\\",\\\", \
\\\"0.001985360668236618`\\\"}], \\\"}\\\"}]\\), resulting from a test for \
normality, is below \\!\\(\\*RowBox[{\\\"0.025`\\\"}]\\). The tests in \\!\\(\
\\*RowBox[{\\\"{\\\", \\\"\\\\\\\"PearsonCorrelation\\\\\\\"\\\", \\\"}\\\"}]\
\\) require that the data is normally distributed.\"",2,63,5,
   26841952602322630427,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.707689724899414*^9},
 CellLabel->
  "During evaluation of \
In[63]:=",ExpressionUUID->"b5ce68d9-5e54-4a04-9a9a-5767cb014362"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {"\<\"\"\>", "\<\"Statistic\"\>", "\<\"P\[Hyphen]Value\"\>"},
     {"\<\"Pearson Correlation\"\>", "0.5382029627095147`", 
      "0.025835267767727033`"}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
    GridBoxDividers->{
     "ColumnsIndexed" -> {2 -> GrayLevel[0.7]}, 
      "RowsIndexed" -> {2 -> GrayLevel[0.7]}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"], "DialogStyle",
  StripOnInput->False]], "Output",
 CellChangeTimes->{3.707689724899414*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"774f2e1e-80fd-4149-bbd5-094faa5f8257"]
}, Open  ]],

Cell[TextData[{
 "Coefficient of Variation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[ScriptR]", "2"], "-"}], TraditionalForm]],
  ExpressionUUID->"055a5da9-ef34-4676-9948-d876c96bf265"],
 " Explained Variation"
}], "Section",
 CellChangeTimes->{{3.7075478125705*^9, 3.7075478378345003`*^9}, {
  3.7075481445959997`*^9, 3.707548146619*^9}, {3.7075638840637803`*^9, 
  3.707563943494439*^9}},ExpressionUUID->"7212a106-356b-4fb9-83b7-\
25356806b6d7"],

Cell[TextData[{
 "In cases where we conclude there is a linear correlation between the two \
variables, we can find a linear equation that expresses y in terms of x \
(linear regression). The value of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[ScriptR]", "2"], TraditionalForm]],ExpressionUUID->
  "cc6ddb76-4eb1-45fa-a177-6fa7f4074e48"],
 " is the proportion of the variation in y that is explained by the linear \
relationship between the two variables."
}], "Text",
 CellChangeTimes->{{3.7075478800235*^9, 3.7075479832345*^9}, {
  3.7075480399585*^9, 
  3.7075481407060003`*^9}},ExpressionUUID->"8bd45c91-6d98-4d5e-83fe-\
ae8b4c76a631"],

Cell[BoxData[
 RowBox[{"model", "[", "\"\<RSquared\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.707553008448*^9, 3.707553016908*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"c6fddf77-8123-4e1f-99fc-9d24522af35f"],

Cell[BoxData["0.11049391381512622`"], "Output",
 CellChangeTimes->{
  3.7075528563105*^9, {3.707552890848*^9, 3.707552935601*^9}, 
   3.7075529688635*^9, 3.7075530176879997`*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"c0e08b7c-1b10-450a-afaa-521a94f1f94f"],

Cell["\<\
What does it mean to say there is a positively or negatively linear \
relationship between two variables?
\
\>", "Text",
 CellChangeTimes->{{3.705104661930198*^9, 3.705104689215759*^9}, {
  3.7051047393916287`*^9, 3.705104783753166*^9}, {3.7051049729169855`*^9, 
  3.7051050045267935`*^9}, {3.705169822193218*^9, 3.705169825188218*^9}, {
  3.707088045387*^9, 
  3.707088081888*^9}},ExpressionUUID->"7cb7a05e-16d9-4cc2-9f82-b03325c9dbad"],

Cell[TextData[{
 "Practice Questions\n",
 StyleBox["Using the Wolfram repository, choose a set of data and create your \
own notebook to do the following:\n\t1. Load data\n\t2. Create a scatter plot\
\n\t3. based on the scatter plot, provide an estimation for the value of the \
correlation coefficient between the two variables and explain your answer.\n\t\
4. Compute the value of the correlation coefficient\n\t", "Text"]
}], "Section",
 CellChangeTimes->{{3.705105405379721*^9, 3.7051054963769255`*^9}, {
  3.705105533220033*^9, 3.705105546902816*^9}, {3.7051057273781385`*^9, 
  3.7051057494323997`*^9}, {3.705169934558218*^9, 3.705169988457218*^9}, {
  3.705684730078251*^9, 3.705684763960388*^9}, {3.7070887106192703`*^9, 
  3.707088712926501*^9}, {3.707088743283536*^9, 3.7070888893*^9}, {
  3.7070889248*^9, 3.707088996406*^9}, {3.707089045624*^9, 
  3.70708908274*^9}},ExpressionUUID->"8a44e532-9030-4923-933a-599d8c0e428e"],

Cell["*Hypothesis Test for Correlation", "Text",
 CellChangeTimes->{{3.705105405379721*^9, 3.7051054963769255`*^9}, {
   3.705105533220033*^9, 3.705105546902816*^9}, {3.7051057273781385`*^9, 
   3.7051057494323997`*^9}, {3.705169934558218*^9, 3.705169988457218*^9}, {
   3.705684730078251*^9, 3.705684755671308*^9}, 3.707089076308*^9, 
   3.7071322247458353`*^9},ExpressionUUID->"eb989a86-ab53-4f71-bd95-\
9b2ddad14689"],

Cell[CellGroupData[{

Cell["Further Explorations", "FurtherExplorationSection",
 CellChangeTimes->{{3.70077612322993*^9, 3.7007761320921593`*^9}, {
  3.7007787731699142`*^9, 
  3.70077877480995*^9}},ExpressionUUID->"a325284e-8d1c-4fcb-9c98-\
118cb697428b"],

Cell["\<\
Multivariate Correlation
Nonlinear regression\
\>", "FurtherExploration",
 CellChangeTimes->{{3.7007765492418337`*^9, 3.7007765636102467`*^9}, {
   3.705104213701561*^9, 3.7051042224510612`*^9}, {3.7051697227932177`*^9, 
   3.7051697367862177`*^9}, {3.7056847753333597`*^9, 
   3.7056847788413363`*^9}, {3.705686193025524*^9, 3.7056861967297907`*^9}, {
   3.707088617282937*^9, 3.707088626566866*^9}, {3.707113075524*^9, 
   3.7071131011*^9}, {3.707113168033*^9, 3.707113212865*^9}, {
   3.707114909127*^9, 3.7071149619370003`*^9}, {3.707115100383*^9, 
   3.707115133602*^9}, {3.707115187059*^9, 3.707115195707*^9}, {
   3.7071153470220003`*^9, 3.707115365049*^9}, {3.7071154157609997`*^9, 
   3.707115420859*^9}, {3.707115876592*^9, 3.707115897759*^9}, {
   3.707116042457*^9, 3.707116050308*^9}, {3.707116307711*^9, 
   3.7071163134779997`*^9}, {3.707116346017*^9, 3.707116377783*^9}, 
   3.7071320660423355`*^9, 3.707132222346835*^9, {3.7071322648968353`*^9, 
   3.707132286994335*^9}, 3.707563830573465*^9, {3.707563954861374*^9, 
   3.707563974003257*^9}, {3.7082003734969997`*^9, 
   3.708200376052*^9}},ExpressionUUID->"10443d1a-d8ff-4b8c-b995-ca899151f2d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Authorship information", "AuthorshipSection",
 CellChangeTimes->{{3.705105762145127*^9, 
  3.7051057665253773`*^9}},ExpressionUUID->"ce562dcc-0e26-4ff1-82ec-\
72230ed13896"],

Cell["Silvani Vejar", "Authorship",
 CellChangeTimes->{{3.7051057700535793`*^9, 3.7051057808261957`*^9}, {
  3.7070886418963985`*^9, 
  3.707088644672676*^9}},ExpressionUUID->"fc0dec19-91d3-45f9-bd3c-\
769b8623e140"],

Cell["06/21/2017", "Authorship",
 CellChangeTimes->{{3.705105786521521*^9, 3.7051057998362827`*^9}, {
   3.707088650492258*^9, 3.707088654874696*^9}, 
   3.708200380259*^9},ExpressionUUID->"bf205bcf-4fe5-414f-bc07-5f567be1e90c"],

Cell["e.vejar@northeastern.edu", "Authorship",
 CellChangeTimes->{{3.7051058070526953`*^9, 3.705105841815684*^9}, {
  3.707088689276136*^9, 
  3.7070886948816967`*^9}},ExpressionUUID->"152cbb5a-4166-4003-a6b8-\
30b26d840711"]
}, Open  ]]
},
CellGrouping->Manual,
WindowSize->{924, 965},
WindowMargins->{{Automatic, 65}, {Automatic, 53}},
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{
       ItemBox["\"\"", ItemSize -> 0.2, StripOnInput -> False], 
       DynamicModuleBox[{}, 
        ActionMenuBox[
        "\"Insert\"", {
         "\"Section\"" :> 
          Module[{$CellContext`nb = ButtonNotebook[]}, 
            Exploration`MoveCursorAfterCellPosition[$CellContext`nb]; 
            NotebookWrite[$CellContext`nb, 
              Cell[
               CellGroupData[{
                 Cell["XXXX", "Section"], 
                 Cell["XXXX", "Text"], 
                 Cell["XXXX", "Direction"], 
                 Cell[
                  BoxData["XXXX"], "Input"]}, Open]], All]; 
            SelectionMove[$CellContext`nb, Before, Cell]; 
            SelectionMove[$CellContext`nb, Next, Cell]; 
            SelectionMove[$CellContext`nb, All, CellContents]], Delimiter, 
          "\"Text\"" :> 
          Module[{$CellContext`nb = ButtonNotebook[]}, 
            Exploration`MoveCursorAfterCellPosition[$CellContext`nb]; 
            NotebookWrite[$CellContext`nb, 
              Cell["XXXX", "Text"], All]; 
            SelectionMove[$CellContext`nb, All, CellContents]], 
          "\"Direction\"" :> 
          Module[{$CellContext`nb = ButtonNotebook[]}, 
            Exploration`MoveCursorAfterCellPosition[$CellContext`nb]; 
            NotebookWrite[$CellContext`nb, 
              Cell["XXXX", "Direction"], All]; 
            SelectionMove[$CellContext`nb, All, CellContents]], 
          "\"Further Exploration\"" :> 
          Module[{$CellContext`nb = ButtonNotebook[]}, 
            Exploration`MoveCursorAfterCellPosition[$CellContext`nb]; 
            NotebookWrite[$CellContext`nb, 
              Cell["XXXX", "FurtherExploration"], All]; 
            SelectionMove[$CellContext`nb, All, CellContents]]}, Method -> 
         "Queued", Appearance -> "PopupMenu", FrameMargins -> 2.4], 
        Initialization :> (Exploration`MoveCursorAfterCellPosition[
           Pattern[$CellContext`nb, 
            Blank[]]] := Which[
           MatchQ[
            Developer`CellInformation[$CellContext`nb], {
             Repeated[{
               BlankSequence[], "CursorPosition" -> "CellBracket", 
               BlankSequence[]}]}], 
           SelectionMove[$CellContext`nb, After, Cell], 
           Developer`CellInformation[$CellContext`nb] =!= $Failed, 
           Module[{$CellContext`lnkre}, 
             While[(LinkWrite[$ParentLink, 
                 
                 FrontEnd`CellInformation[$CellContext`nb]]; \
$CellContext`lnkre = LinkRead[$ParentLink]); 
              And[$CellContext`lnkre =!= $Failed, 
                Not[
                 MemberQ[
                  ReplaceAll["CursorPosition", $CellContext`lnkre], 
                  "CellBracket"]]], 
              FrontEndExecute[
               
               FrontEnd`SelectionMove[$CellContext`nb, All, Cell, AutoScroll -> 
                False]]]]; SelectionMove[$CellContext`nb, After, Cell]]), 
        DynamicModuleValues :> {}], 
       ItemBox["\"\"", ItemSize -> Fit, StripOnInput -> False], 
       ButtonBox["\"Sample\"", ButtonFunction :> NotebookOpen[
          
          FileNameJoin[{$UserBaseDirectory, "Applications", 
            "SummerSchoolTemplates", "FrontEnd", "TextResources", 
            "TopicExplorationExample.nb"}]], Appearance -> Automatic, 
        Evaluator -> Automatic, Method -> "Queued"]}}, AutoDelete -> False, 
     GridBoxItemSize -> {
      "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
  "DockedCell"],
CellLabelAutoDelete->False,
Magnification:>1.5 Inherited,
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (April 18, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 413, 5, 246, "Title", "ExpressionUUID" -> \
"5c6730e6-6edc-4e66-bdb4-e722ac853286"],
Cell[974, 27, 636, 8, 65, "Abstract", "ExpressionUUID" -> \
"7f9ea7fc-f716-4c20-9916-041eb0044c8e"],
Cell[1613, 37, 326, 5, 46, "Input", "ExpressionUUID" -> \
"3da71b51-26b7-4498-95ee-bce05c506360"],
Cell[1942, 44, 421, 6, 107, "Section", "ExpressionUUID" -> \
"cf1167b2-243f-407d-bf5d-74e1334e781c"],
Cell[2366, 52, 2712, 43, 552, "Text", "ExpressionUUID" -> \
"3a3cb3c8-c736-4327-9863-953d1b6ee113"],
Cell[5081, 97, 1337, 37, 227, "Text", "ExpressionUUID" -> \
"80e95330-69e6-4966-a366-e7e80b5d35bb"],
Cell[6421, 136, 204, 3, 58, "Subsubsection", "ExpressionUUID" -> \
"0575f350-3928-4e7b-be3e-f72e3a61ed19"],
Cell[6628, 141, 210, 4, 39, "Text", "ExpressionUUID" -> \
"d3ccfc18-0560-4e68-9930-10b24fed4a2a"],
Cell[6841, 147, 893, 30, 77, "DisplayFormula", "ExpressionUUID" -> \
"2ada5ded-2929-41d7-9969-0270de392828"],
Cell[7737, 179, 207, 5, 72, "Subsection", "ExpressionUUID" -> \
"7335e475-c3ab-4afa-9e5c-e4f71168825d"],
Cell[7947, 186, 1106, 28, 123, "Input", "ExpressionUUID" -> \
"918b87f5-c668-43c5-8b9e-9b707f6304c3"],
Cell[CellGroupData[{
Cell[9078, 218, 1175, 34, 157, "Input", "ExpressionUUID" -> \
"51270cf2-3591-4bce-842e-dcd173a9d662"],
Cell[10256, 254, 202977, 3463, 608, "Output", "ExpressionUUID" -> \
"3c97f718-8011-4dd2-8f9b-1319a4451f52"]
}, {2}]],
Cell[213245, 3720, 215, 6, 75, "Text", "ExpressionUUID" -> \
"cee7e2f3-9342-458b-97c4-b39f6c615f7c"],
Cell[CellGroupData[{
Cell[213485, 3730, 11631, 311, 1506, "Input", "ExpressionUUID" -> \
"94e7c6ba-028d-4243-8407-291686ab67fb"],
Cell[225119, 4043, 6971, 137, 726, "Output", "ExpressionUUID" -> \
"3f73a181-cf2b-4ba9-bdeb-0e44325fba05"]
}, {2}]],
Cell[232102, 4183, 386, 8, 159, "Subsection", "ExpressionUUID" -> \
"53edb94e-c79b-4a38-857e-ad02c8c5818f"],
Cell[232491, 4193, 338, 5, 36, "Input", "ExpressionUUID" -> \
"a25b98bd-3785-402f-ad1c-af42369c0494"],
Cell[232832, 4200, 744, 13, 75, "Text", "ExpressionUUID" -> \
"5ceedab0-02da-47fa-896d-c1c0fc015ccd"],
Cell[CellGroupData[{
Cell[233601, 4217, 1227, 21, 76, "Input", "ExpressionUUID" -> \
"9fc50556-ca08-4efd-b29e-2fa56054d09d"],
Cell[234831, 4240, 68648, 1411, 841, "Output", "ExpressionUUID" -> \
"0833abdf-9c83-4cff-9bb0-f0557c8f14d5"]
}, Open  ]],
Cell[303494, 5654, 1225, 20, 189, "Text", "ExpressionUUID" -> \
"e27a1f1d-65d0-4aa6-8db6-c227b459b703"],
Cell[304722, 5676, 189, 3, 46, "Text", "ExpressionUUID" -> \
"616bcc55-5509-4373-a31b-27b7a3cb82ec"],
Cell[CellGroupData[{
Cell[304936, 5683, 644, 13, 46, "Input", "ExpressionUUID" -> \
"4dafd5f0-e488-472b-9026-df7ecb017c38"],
Cell[305583, 5698, 68630, 1411, 841, "Output", "ExpressionUUID" -> \
"303862ba-1d7e-41c7-bd00-19497b063f27"]
}, Open  ]],
Cell[374228, 7112, 193, 3, 46, "Text", "ExpressionUUID" -> \
"373db6c7-43d1-4279-8813-19ceca14be74"],
Cell[CellGroupData[{
Cell[374446, 7119, 271, 4, 46, "Input", "ExpressionUUID" -> \
"93a0f562-4552-4466-94c2-4e04fa39677d"],
Cell[374720, 7125, 174, 2, 46, "Output", "ExpressionUUID" -> \
"dc1112ee-ddba-4b4b-8530-28a7968162c7"]
}, Open  ]],
Cell[374909, 7130, 269, 5, 46, "Text", "ExpressionUUID" -> \
"bfd8bc90-1d16-4e2c-b176-951276364436"],
Cell[CellGroupData[{
Cell[375203, 7139, 745, 16, 76, "Input", "ExpressionUUID" -> \
"693eb1be-c579-4513-b0b8-c609296055f7"],
Cell[375951, 7157, 68509, 1410, 841, "Output", "ExpressionUUID" -> \
"6b4be3e0-b913-4982-9205-41fa0bd78a2b"]
}, Closed]],
Cell[444475, 8570, 198, 5, 39, "Text", "ExpressionUUID" -> \
"480ae3cc-f0b9-4305-b5df-06a31ae406c9"],
Cell[CellGroupData[{
Cell[444698, 8579, 274, 4, 46, "Input", "ExpressionUUID" -> \
"417fd188-1ffc-4227-980f-4181a9d74814"],
Cell[444975, 8585, 205, 3, 46, "Output", "ExpressionUUID" -> \
"8a60b6ed-4195-4663-98f1-2968585851c7"]
}, Open  ]],
Cell[445195, 8591, 200, 3, 46, "Text", "ExpressionUUID" -> \
"a6e1949e-8a4b-4984-928b-370e436f9b5c"],
Cell[CellGroupData[{
Cell[445420, 8598, 530, 13, 76, "Input", "ExpressionUUID" -> \
"99e73bdf-0c25-4418-bd4a-cce6f24bade2"],
Cell[445953, 8613, 39536, 827, 700, "Output", "ExpressionUUID" -> \
"872f7e14-dff2-46dd-a9bc-8b07a6d9422c"]
}, Closed]],
Cell[485504, 9443, 200, 3, 39, "Text", "ExpressionUUID" -> \
"e496f695-37a9-4b3f-9a76-6505d14550e2"],
Cell[CellGroupData[{
Cell[485729, 9450, 270, 4, 46, "Input", "ExpressionUUID" -> \
"b18b0919-d524-42c9-af1b-6bfa69f1718c"],
Cell[486002, 9456, 205, 3, 46, "Output", "ExpressionUUID" -> \
"9a46c2be-4202-4a5f-90a2-b41096747721"]
}, Open  ]],
Cell[486222, 9462, 163, 3, 46, "Text", "ExpressionUUID" -> \
"167394f6-4525-428e-9fcc-fb1b660024b2"],
Cell[CellGroupData[{
Cell[486410, 9469, 864, 19, 134, "Input", "ExpressionUUID" -> \
"9497b389-565f-4e0a-b169-9eef18684993"],
Cell[487277, 9490, 1761, 44, 343, "Output", "ExpressionUUID" -> \
"28ff6212-5ae8-4054-8dc8-59e6872c66f4"]
}, Closed]],
Cell[489053, 9537, 184, 3, 39, "Text", "ExpressionUUID" -> \
"ffb61def-4769-4c17-8455-9f0e1c7e3d65"],
Cell[CellGroupData[{
Cell[489262, 9544, 943, 21, 134, "Input", "ExpressionUUID" -> \
"47ebfa96-c9e4-4f7c-b0a6-311048b8cd09"],
Cell[490208, 9567, 1767, 44, 343, "Output", "ExpressionUUID" -> \
"5c4ef47d-b32f-48a8-87f5-ef5151411884"]
}, Closed]],
Cell[491990, 9614, 172, 3, 39, "Text", "ExpressionUUID" -> \
"7b92e207-071b-48d1-b947-47791da8a12d"],
Cell[492165, 9619, 854, 20, 134, "Input", "ExpressionUUID" -> \
"ff82e82b-bb9b-4143-b209-a8860c1760c4"],
Cell[493022, 9641, 240, 4, 46, "Text", "ExpressionUUID" -> \
"25c32b43-b7b2-40ec-89b6-9abe04c40e85"],
Cell[CellGroupData[{
Cell[493287, 9649, 340, 8, 46, "Input", "ExpressionUUID" -> \
"e4ed204c-14f8-4fa1-8cdb-b4753c08be17"],
Cell[493630, 9659, 7535, 177, 289, "Input", "ExpressionUUID" -> \
"2ca22e70-a36a-4ab4-8527-c8c14bd5018b"]
}, Open  ]],
Cell[501180, 9839, 822, 16, 160, "Text", "ExpressionUUID" -> \
"9e2539c8-4901-45b6-befc-ba07c25f7bbd"],
Cell[502005, 9857, 247, 4, 46, "Text", "ExpressionUUID" -> \
"de442ea1-7181-4c67-a7b2-decbd5fd0a5a"],
Cell[CellGroupData[{
Cell[502277, 9865, 1243, 24, 105, "Input", "ExpressionUUID" -> \
"0833d024-a220-4d6f-9ff5-a5aecc369321"],
Cell[503523, 9891, 191, 4, 46, "Output", "ExpressionUUID" -> \
"9464b613-fcbe-41d7-b4bf-4f527b1aa408"]
}, Open  ]],
Cell[503729, 9898, 219, 5, 46, "Text", "ExpressionUUID" -> \
"cd908701-b20d-4115-ba44-105086735fec"],
Cell[CellGroupData[{
Cell[503973, 9907, 1286, 24, 163, "Input", "ExpressionUUID" -> \
"499296fb-7527-4803-ba99-a1819aad6b8b"],
Cell[505262, 9933, 270, 4, 46, "Output", "ExpressionUUID" -> \
"8dadc0ee-552c-4448-bb07-073c70439e97"]
}, Open  ]],
Cell[505547, 9940, 225, 4, 46, "Text", "ExpressionUUID" -> \
"10d16123-3f28-4dcb-a2b5-8df8c29376fe"],
Cell[CellGroupData[{
Cell[505797, 9948, 549, 13, 134, "Input", "ExpressionUUID" -> \
"3846fea0-b3e5-4fe6-be0c-b2a4aa447c39"],
Cell[506349, 9963, 219, 4, 46, "Output", "ExpressionUUID" -> \
"644d3aa6-c9e2-454a-ab1c-5d47e93e6707"]
}, Open  ]],
Cell[506583, 9970, 205, 3, 75, "Subtitle", "ExpressionUUID" -> \
"d1d78134-87b6-41d4-a0f6-f85d76b847f5"],
Cell[506791, 9975, 960, 15, 189, "Text", "ExpressionUUID" -> \
"196304f8-33cb-4fd3-804e-5c6d7344cb25"],
Cell[507754, 9992, 315, 6, 75, "Text", "ExpressionUUID" -> \
"93977ecc-bcd8-4b8f-a3ee-ee1fbbeaf8f2"],
Cell[508072, 10000, 381, 9, 75, "Text", "ExpressionUUID" -> \
"947ca9df-0452-4e54-b867-8f8827d88a67"],
Cell[508456, 10011, 312, 5, 89, "Section", "ExpressionUUID" -> \
"7d023089-b374-4c98-ae7f-d0e7f4e05af4"],
Cell[508771, 10018, 1581, 32, 381, "Text", "ExpressionUUID" -> \
"38a40f64-7932-48cb-b521-d0f74e064c02"],
Cell[CellGroupData[{
Cell[510377, 10054, 642, 15, 105, "Input", "ExpressionUUID" -> \
"a4d5db44-edfa-4a17-b311-55864c4f94a8"],
Cell[511022, 10071, 12371, 290, 112, "Output", "ExpressionUUID" -> \
"248414fe-0b72-4bb7-b2f1-5946b50878b6"]
}, Open  ]],
Cell[523408, 10364, 151, 3, 46, "Input", "ExpressionUUID" -> \
"1deb9a0f-c7c6-4749-9330-26c3ca210aea"],
Cell[CellGroupData[{
Cell[523584, 10371, 286, 5, 46, "Input", "ExpressionUUID" -> \
"598a851f-7110-4e44-a4e0-2a4968af19cf"],
Cell[523873, 10378, 472, 11, 65, "Message", "ExpressionUUID" -> \
"6cd1737c-9730-4d47-a867-384d97fc7174"],
Cell[524348, 10391, 12675, 291, 182, "Output", "ExpressionUUID" -> \
"2778bd0d-3462-442b-ad6c-a17fb07b316b"],
Cell[537026, 10684, 861, 19, 80, "Output", "ExpressionUUID" -> \
"e7eef8a7-e3ba-42ef-946c-15b76f25c82a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[537924, 10708, 235, 3, 46, "Input", "ExpressionUUID" -> \
"2a8b27f5-6eab-45a2-9318-342435c3132f"],
Cell[538162, 10713, 476, 10, 105, "Output", "ExpressionUUID" -> \
"8f722bdf-ddd3-4acc-8abf-3746aa4af534"]
}, Open  ]],
Cell[CellGroupData[{
Cell[538675, 10728, 596, 13, 105, "Input", "ExpressionUUID" -> \
"95eb41a3-533f-48a9-94a7-f66e09be26f4"],
Cell[539274, 10743, 12312, 287, 112, "Output", "ExpressionUUID" -> \
"09b77f8e-31ff-410f-978d-a7ae27de5345"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551623, 11035, 239, 4, 46, "Input", "ExpressionUUID" -> \
"e72e9931-65a4-4f8d-a4b9-b0d6fa1b7821"],
Cell[551865, 11041, 264, 5, 46, "Output", "ExpressionUUID" -> \
"786c005b-bca1-4740-8d95-c2f83fc6b2c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552166, 11051, 238, 3, 46, "Input", "ExpressionUUID" -> \
"52c42f79-9f03-48bd-9fef-24bbc21c6ee0"],
Cell[552407, 11056, 500, 10, 105, "Output", "ExpressionUUID" -> \
"6424ea3b-7635-49af-9dc3-41649c26b236"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552944, 11071, 568, 13, 105, "Input", "ExpressionUUID" -> \
"1a9499a1-1f2b-4d23-ad7a-595e6e60770f"],
Cell[553515, 11086, 12221, 285, 112, "Output", "ExpressionUUID" -> \
"a7a9d6d8-e152-4bbb-928c-0bf85af14956"]
}, Open  ]],
Cell[CellGroupData[{
Cell[565773, 11376, 306, 6, 76, "Input", "ExpressionUUID" -> \
"8e5bd5a5-d4f2-4f6f-8727-6a9bf0c6a981"],
Cell[566082, 11384, 703, 14, 94, "Message", "ExpressionUUID" -> \
"b5ce68d9-5e54-4a04-9a9a-5767cb014362"],
Cell[566788, 11400, 759, 17, 80, "Output", "ExpressionUUID" -> \
"774f2e1e-80fd-4149-bbd5-094faa5f8257"]
}, Open  ]],
Cell[567562, 11420, 468, 12, 107, "Section", "ExpressionUUID" -> \
"7212a106-356b-4fb9-83b7-25356806b6d7"],
Cell[568033, 11434, 646, 14, 127, "Text", "ExpressionUUID" -> \
"8bd45c91-6d98-4d5e-83fe-ae8b4c76a631"],
Cell[568682, 11450, 216, 4, 46, "Input", "ExpressionUUID" -> \
"c6fddf77-8123-4e1f-99fc-9d24522af35f"],
Cell[568901, 11456, 261, 5, 46, "Output", "ExpressionUUID" -> \
"c0e08b7c-1b10-450a-afaa-521a94f1f94f"],
Cell[569165, 11463, 447, 9, 75, "Text", "ExpressionUUID" -> \
"7cb7a05e-16d9-4cc2-9f82-b03325c9dbad"],
Cell[569615, 11474, 934, 14, 417, "Section", "ExpressionUUID" -> \
"8a44e532-9030-4923-933a-599d8c0e428e"],
Cell[570552, 11490, 420, 6, 58, "Text", "ExpressionUUID" -> \
"eb989a86-ab53-4f71-bd95-9b2ddad14689"],
Cell[CellGroupData[{
Cell[570997, 11500, 234, 4, 48, "FurtherExplorationSection", "ExpressionUUID" \
-> "a325284e-8d1c-4fcb-9c98-118cb697428b"],
Cell[571234, 11506, 1175, 19, 81, "FurtherExploration", "ExpressionUUID" -> \
"10443d1a-d8ff-4b8c-b995-ca899151f2d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[572446, 11530, 179, 3, 48, "AuthorshipSection", "ExpressionUUID" -> \
"ce562dcc-0e26-4ff1-82ec-72230ed13896"],
Cell[572628, 11535, 216, 4, 48, "Authorship", "ExpressionUUID" -> \
"fc0dec19-91d3-45f9-bd3c-769b8623e140"],
Cell[572847, 11541, 228, 3, 48, "Authorship", "ExpressionUUID" -> \
"bf205bcf-4fe5-414f-bc07-5f567be1e90c"],
Cell[573078, 11546, 225, 4, 72, "Authorship", "ExpressionUUID" -> \
"152cbb5a-4166-4003-a6b8-30b26d840711"]
}, Open  ]]
}
]
*)

